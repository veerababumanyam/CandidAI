(()=>{"use strict";const t=("undefined"!=typeof chrome&&chrome.offscreen&&(chrome.offscreen.Reason.USER_MEDIA,chrome.offscreen.Reason.AUDIO_PLAYBACK),{OPENAI:{name:"OpenAI",baseUrl:"https://api.openai.com/v1",models:["gpt-4","gpt-4-turbo","gpt-3.5-turbo"],maxTokens:4096,rateLimits:{requestsPerMinute:60,tokensPerMinute:9e4,dailyLimit:1e6}},ANTHROPIC:{name:"Anthropic",baseUrl:"https://api.anthropic.com/v1",models:["claude-3-opus","claude-3-sonnet","claude-3-haiku"],maxTokens:4096,rateLimits:{requestsPerMinute:50,tokensPerMinute:4e4,dailyLimit:5e5}},GOOGLE:{name:"Google",baseUrl:"https://generativelanguage.googleapis.com/v1",models:["gemini-pro","gemini-pro-vision"],maxTokens:2048,rateLimits:{requestsPerMinute:60,tokensPerMinute:32e3,dailyLimit:1e6}}});t.OPENAI.baseUrl,t.OPENAI.rateLimits,t.ANTHROPIC.baseUrl,t.ANTHROPIC.rateLimits;const e=new class{adapters=new Map([]);currentAdapter=null;mutationObserver=null;detectionState={platform:null,isVideoCall:!1,metadata:{}};constructor(){this.initialize().catch((t=>{console.error("PlatformDetector initialization failed:",t)}))}async initialize(){console.log("CandidAI Content Script initializing...");try{const t=this.detectPlatform();t&&(console.log(`Detected platform: ${t}`),await this.initializePlatformAdapter(t)),this.observeDOMChanges(),this.initializeMessageListener(),this.monitorURLChanges()}catch(t){console.error("PlatformDetector initialization error:",t)}}detectPlatform(){const t=window.location.hostname;for(const[e]of this.adapters)if(t.includes(e))return e;return null}async initializePlatformAdapter(t){const e=this.adapters.get(t);if(e)try{this.currentAdapter&&this.currentAdapter.cleanup(),this.currentAdapter=new e,await this.currentAdapter.initialize(),this.detectionState.isVideoCall=await this.currentAdapter.isInVideoCall(),this.detectionState.platform=t,this.detectionState.metadata=await this.currentAdapter.extractMetadata(),await this.notifyPlatformDetected(),this.currentAdapter.onVideoCallStateChange((t=>{this.handleVideoCallStateChange(t).catch((t=>{console.error("Error handling video call state change:",t)}))})),console.log("Platform adapter initialized successfully:",t)}catch(t){console.error("Failed to initialize platform adapter:",t),this.currentAdapter=null}else console.error(`No adapter found for platform: ${t}`)}observeDOMChanges(){this.mutationObserver&&this.mutationObserver.disconnect(),this.mutationObserver=new MutationObserver((t=>{try{if(!this.currentAdapter&&this.detectPlatform())return void this.initialize().catch((t=>{console.error("Re-initialization failed:",t)}));this.currentAdapter?.handleMutations&&this.currentAdapter.handleMutations(t)}catch(t){console.error("Error in mutation observer:",t)}})),this.mutationObserver.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["class","data-meeting-id","data-call-id"]})}monitorURLChanges(){let t=location.href;const e=history.pushState.bind(history),a=history.replaceState.bind(history);history.pushState=function(t,a,r){e(t,a,r),window.dispatchEvent(new Event("urlchange"))},history.replaceState=function(t,e,r){a(t,e,r),window.dispatchEvent(new Event("urlchange"))};const r=()=>{location.href!==t&&(t=location.href,this.handleURLChange().catch((t=>{console.error("Error handling URL change:",t)})))};window.addEventListener("urlchange",r),window.addEventListener("popstate",r)}async handleURLChange(){try{const t=this.detectPlatform();t!==this.detectionState.platform&&(console.log("Platform changed, reinitializing..."),this.currentAdapter&&(this.currentAdapter.cleanup(),this.currentAdapter=null),t?await this.initializePlatformAdapter(t):this.detectionState={platform:null,isVideoCall:!1,metadata:{}})}catch(t){console.error("Error handling URL change:",t)}}initializeMessageListener(){chrome.runtime.onMessage.addListener(((t,e,a)=>(this.handleMessage(t,e,a).catch((t=>{console.error("Error handling message:",t),a({success:!1,error:t instanceof Error?t.message:"Unknown error"})})),!0)))}async handleMessage(t,e,a){const{command:r,payload:i}=t;try{switch(r){case"get_platform_status":a({success:!0,data:{platform:this.detectionState.platform,isVideoCall:this.detectionState.isVideoCall,metadata:this.detectionState.metadata}});break;case"extract_page_context":a({success:!0,data:await this.extractPageContext()});break;case"inject_ui":await this.injectUI(i?.config),a({success:!0});break;default:console.warn("Unknown command received in content script:",r),a({success:!1,error:"Unknown command",details:`Command not recognized: ${r}`})}}catch(t){const e=t instanceof Error?t.message:"Unknown error";console.error(`Error handling command ${r}:`,t),a({success:!1,error:e})}}async notifyPlatformDetected(){try{await chrome.runtime.sendMessage({command:"platform_detected",payload:{platform:this.detectionState.platform,isVideoCall:this.detectionState.isVideoCall,metadata:this.detectionState.metadata,url:window.location.href,timestamp:Date.now()}})}catch(t){console.error("Failed to notify platform detection:",t)}}async handleVideoCallStateChange(t){try{this.detectionState.isVideoCall=t,await chrome.runtime.sendMessage({command:"video_call_state_changed",payload:{inCall:t,platform:this.detectionState.platform,metadata:this.detectionState.metadata,timestamp:Date.now()}}),console.log("Video call state changed: "+(t?"started":"ended"))}catch(t){console.error("Failed to notify video call state change:",t)}}async extractPageContext(){try{const t={url:window.location.href,title:document.title,platform:this.detectionState.platform,timestamp:Date.now()};if(this.currentAdapter){const e=await this.currentAdapter.extractMetadata();Object.assign(t,e)}return t}catch(t){return console.error("Failed to extract page context:",t),{url:window.location.href,title:document.title,error:t instanceof Error?t.message:"Unknown error"}}}async injectUI(t){try{console.log("Injecting UI with config:",t)}catch(t){throw console.error("Failed to inject UI:",t),t}}cleanup(){try{this.mutationObserver&&(this.mutationObserver.disconnect(),this.mutationObserver=null),this.currentAdapter&&(this.currentAdapter.cleanup(),this.currentAdapter=null),console.log("PlatformDetector cleanup completed")}catch(t){console.error("Error during cleanup:",t)}}};window.addEventListener("beforeunload",(()=>{e.cleanup()}))})();
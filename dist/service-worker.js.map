{"version":3,"file":"service-worker.js","mappings":"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","sources":["webpack://candidai-chrome-extension/./src/ts/api/BaseLLMProvider.ts","webpack://candidai-chrome-extension/./src/ts/api/anthropic.ts","webpack://candidai-chrome-extension/./src/ts/api/gemini.ts","webpack://candidai-chrome-extension/./src/ts/api/openai.ts","webpack://candidai-chrome-extension/./src/ts/services/contextManager.ts","webpack://candidai-chrome-extension/./src/ts/services/documentManager.ts","webpack://candidai-chrome-extension/./src/ts/services/llmOrchestrator.ts","webpack://candidai-chrome-extension/./src/ts/services/performanceAnalyzer.ts","webpack://candidai-chrome-extension/./src/ts/services/resumeParser.ts","webpack://candidai-chrome-extension/./src/ts/utils/constants.ts","webpack://candidai-chrome-extension/./src/ts/utils/messaging.ts","webpack://candidai-chrome-extension/./src/ts/utils/storage.ts","webpack://candidai-chrome-extension/webpack/bootstrap","webpack://candidai-chrome-extension/webpack/runtime/define property getters","webpack://candidai-chrome-extension/webpack/runtime/hasOwnProperty shorthand","webpack://candidai-chrome-extension/webpack/runtime/make namespace object","webpack://candidai-chrome-extension/./src/background/service-worker.ts"],"sourcesContent":["/**\n * BaseLLMProvider - Abstract base class for LLM providers\n * Implements Template Method pattern for provider consistency\n * Provides shared functionality and interface contracts\n */\n\nimport type { LLMRequest, LLMResponse } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface ProviderConfig {\n  models?: string[];\n  capabilities?: string[];\n  baseURL?: string;\n  timeout?: number;\n  maxRetries?: number;\n}\n\nexport interface RateLimits {\n  requestsPerMinute: number;\n  tokensPerMinute: number;\n  requestsPerDay: number;\n}\n\nexport interface RequestHistoryEntry {\n  time: number;\n  tokens: number;\n}\n\nexport interface ModelConfig {\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n  supportsVision?: boolean;\n  supportsFunctions?: boolean;\n  costPer1kInput?: number;\n  costPer1kOutput?: number;\n}\n\nexport interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\nexport interface UsageStats {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\n// =============================================================================\n// BASE LLM PROVIDER CLASS\n// =============================================================================\n\n/**\n * BaseLLMProvider - Foundation for all LLM provider implementations\n * Defines common interface and shared utilities\n */\nexport abstract class BaseLLMProvider {\n  protected readonly apiKey: string;\n  protected readonly config: ProviderConfig;\n  protected baseURL: string;\n  protected models: string[];\n  protected capabilities: string[];\n  protected rateLimits: RateLimits;\n  protected requestHistory: number[];\n  protected tokenHistory: RequestHistoryEntry[];\n  protected modelConfigs: Record<string, ModelConfig> = {};\n\n  constructor(apiKey: string, config: ProviderConfig = {}) {\n    if (new.target === BaseLLMProvider) {\n      throw new Error('BaseLLMProvider is an abstract class and cannot be instantiated directly');\n    }\n\n    this.apiKey = apiKey;\n    this.config = config;\n    this.baseURL = config.baseURL || '';\n    this.models = config.models || [];\n    this.capabilities = config.capabilities || [];\n\n    // Rate limiting configuration\n    this.rateLimits = {\n      requestsPerMinute: 60,\n      tokensPerMinute: 90000,\n      requestsPerDay: 10000,\n    };\n\n    // Request tracking for rate limiting\n    this.requestHistory = [];\n    this.tokenHistory = [];\n  }\n\n  /**\n   * Generate completion - must be implemented by subclasses\n   * @abstract\n   */\n  abstract generateCompletion(params: LLMRequest): Promise<LLMResponse>;\n\n  /**\n   * Test API connection - must be implemented by subclasses\n   * @abstract\n   */\n  abstract testConnection(): Promise<boolean>;\n\n  /**\n   * Check rate limits before making request\n   * Implements rate limiting logic\n   */\n  protected checkRateLimits(estimatedTokens: number = 0): void {\n    const now = Date.now();\n    const oneMinuteAgo = now - 60000;\n    const oneDayAgo = now - 86400000;\n\n    // Clean old history\n    this.requestHistory = this.requestHistory.filter((time) => time > oneDayAgo);\n    this.tokenHistory = this.tokenHistory.filter((entry) => entry.time > oneMinuteAgo);\n\n    // Check requests per minute\n    const recentRequests = this.requestHistory.filter((time) => time > oneMinuteAgo).length;\n    if (recentRequests >= this.rateLimits.requestsPerMinute) {\n      throw new Error('Rate limit exceeded: requests per minute');\n    }\n\n    // Check tokens per minute\n    const recentTokens = this.tokenHistory\n      .filter((entry) => entry.time > oneMinuteAgo)\n      .reduce((sum, entry) => sum + entry.tokens, 0);\n\n    if (recentTokens + estimatedTokens > this.rateLimits.tokensPerMinute) {\n      throw new Error('Rate limit exceeded: tokens per minute');\n    }\n\n    // Check daily limit\n    if (this.requestHistory.length >= this.rateLimits.requestsPerDay) {\n      throw new Error('Rate limit exceeded: daily request limit');\n    }\n  }\n\n  /**\n   * Record request for rate limiting\n   * Updates tracking history\n   */\n  protected recordRequest(tokens: number): void {\n    const now = Date.now();\n    this.requestHistory.push(now);\n    this.tokenHistory.push({ time: now, tokens });\n  }\n\n  /**\n   * Estimate token count for text\n   * Implements basic tokenization heuristic\n   */\n  protected estimateTokens(text: string): number {\n    // Rough estimation: ~4 characters per token\n    return Math.ceil(text.length / 4);\n  }\n\n  /**\n   * Validate model selection\n   * Ensures model is available\n   */\n  protected validateModel(model: string): void {\n    if (!this.models.includes(model)) {\n      throw new Error(`Model ${model} is not available for this provider`);\n    }\n  }\n\n  /**\n   * Check if capability is supported\n   * Validates provider capabilities\n   */\n  public hasCapability(capability: string): boolean {\n    return this.capabilities.includes(capability);\n  }\n\n  /**\n   * Format messages for API\n   * Normalizes message format\n   */\n  protected formatMessages(messages: (string | Message)[]): Message[] {\n    return messages.map((msg) => {\n      if (typeof msg === 'string') {\n        return { role: 'user' as const, content: msg };\n      }\n      return {\n        role: msg.role || 'user',\n        content: msg.content || '',\n      };\n    });\n  }\n\n  /**\n   * Handle common error scenarios\n   * Provides consistent error handling\n   */\n  protected handleCommonErrors(error: any): never {\n    const message = error.message?.toLowerCase() || '';\n\n    if (message.includes('unauthorized') || message.includes('401')) {\n      throw new Error('Authentication failed. Please check your API key.');\n    }\n\n    if (message.includes('rate limit') || message.includes('429')) {\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n\n    if (message.includes('timeout')) {\n      throw new Error('Request timed out. Please try again.');\n    }\n\n    if (message.includes('network')) {\n      throw new Error('Network error. Please check your connection.');\n    }\n\n    throw error;\n  }\n\n  /**\n   * Get model configuration\n   * Returns model-specific settings\n   */\n  protected getModelConfig(model: string): ModelConfig | null {\n    return this.modelConfigs?.[model] || null;\n  }\n\n  /**\n   * Calculate pricing for usage\n   * Must be implemented by subclasses if pricing is supported\n   */\n  public calculatePricing(usage: UsageStats, model: string): number {\n    return 0; // Default implementation\n  }\n\n  /**\n   * Get available models\n   */\n  public getModels(): readonly string[] {\n    return Object.freeze([...this.models]);\n  }\n\n  /**\n   * Get provider capabilities\n   */\n  public getCapabilities(): readonly string[] {\n    return Object.freeze([...this.capabilities]);\n  }\n} ","/**\n * AnthropicProvider - Anthropic Claude API integration\n * Implements Claude-specific features and message formatting\n * Provides robust error handling and streaming support\n */\n\nimport { BaseLLMProvider, type ProviderConfig, type UsageStats } from './BaseLLMProvider';\nimport type { LLMRequest, LLMResponse } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface AnthropicModelConfig {\n  maxTokens: number;\n  supportsVision: boolean;\n  supportsFunctions: boolean;\n  costPer1kInput: number;\n  costPer1kOutput: number;\n}\n\nexport interface AnthropicMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface AnthropicCompletionParams {\n  prompt?: string;\n  context?: any;\n  callType?: any;\n  tone?: any;\n  model?: string;\n  messages?: AnthropicMessage[];\n  systemPrompt?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  [key: string]: any;\n}\n\nexport interface AnthropicResponse {\n  id: string;\n  type: string;\n  role: string;\n  content: Array<{\n    type: string;\n    text: string;\n  }>;\n  model: string;\n  stop_reason: string;\n  stop_sequence?: string;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport interface AnthropicStreamChunk {\n  content: string;\n  role: string;\n  isStream: boolean;\n}\n\n// =============================================================================\n// ANTHROPIC PROVIDER CLASS\n// =============================================================================\n\n/**\n * AnthropicProvider - Implements Anthropic's Claude API\n * Extends base provider with Claude-specific capabilities\n */\nexport class AnthropicProvider extends BaseLLMProvider {\n  private readonly anthropicVersion: string;\n\n  constructor(apiKey: string, config: ProviderConfig = {}) {\n    super(apiKey, config);\n\n    this.baseURL = 'https://api.anthropic.com/v1';\n    this.models = config.models || [\n      'claude-3-opus-20240229',\n      'claude-3-sonnet-20240229',\n      'claude-3-haiku-20240307',\n    ];\n\n    // Model-specific configurations\n    this.modelConfigs = {\n      'claude-3-opus-20240229': {\n        maxTokens: 200000,\n        supportsVision: true,\n        supportsFunctions: false, // Claude uses tools instead\n        costPer1kInput: 0.015,\n        costPer1kOutput: 0.075,\n      },\n      'claude-3-sonnet-20240229': {\n        maxTokens: 200000,\n        supportsVision: true,\n        supportsFunctions: false,\n        costPer1kInput: 0.003,\n        costPer1kOutput: 0.015,\n      },\n      'claude-3-haiku-20240307': {\n        maxTokens: 200000,\n        supportsVision: true,\n        supportsFunctions: false,\n        costPer1kInput: 0.00025,\n        costPer1kOutput: 0.00125,\n      },\n    };\n\n    // Anthropic-specific configuration\n    this.anthropicVersion = '2023-06-01';\n  }\n\n  /**\n   * Generate completion with Anthropic Messages API\n   * Implements Claude-specific formatting\n   */\n  async generateCompletion(params: LLMRequest | AnthropicCompletionParams): Promise<LLMResponse> {\n    const {\n      model = 'claude-3-sonnet-20240229',\n      messages,\n      temperature = 0.7,\n      maxTokens = 500,\n      stream = false,\n    } = params;\n    \n    const systemPrompt = 'systemPrompt' in params ? params.systemPrompt : undefined;\n\n    // Validate model\n    if (!this.models.includes(model)) {\n      throw new Error(`Model ${model} not available for Anthropic provider`);\n    }\n\n    // Format messages for Anthropic API\n    const messageArray = Array.isArray(messages) ? messages : [];\n    const formattedMessages = this.formatMessagesForClaude(messageArray);\n\n    // Build request payload\n    const payload: any = {\n      model,\n      messages: formattedMessages,\n      max_tokens: maxTokens,\n      temperature,\n      stream,\n    };\n\n    // Add system prompt if provided\n    if (systemPrompt) {\n      payload.system = systemPrompt;\n    }\n\n    try {\n      const response = await this.makeRequest('/messages', payload);\n\n      if (stream) {\n        return {\n          provider: 'anthropic',\n          model,\n          isStream: true,\n          stream: this.handleStreamResponse(response as any),\n        };\n      } else {\n        return this.formatResponse(response, model);\n      }\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Format messages for Claude API\n   * Implements Claude-specific message structure\n   */\n  private formatMessagesForClaude(messages: any[]): AnthropicMessage[] {\n    const formatted: AnthropicMessage[] = [];\n\n    messages.forEach((msg) => {\n      // Ensure alternating user/assistant messages\n      const lastMessage = formatted[formatted.length - 1];\n      if (formatted.length === 0 || (lastMessage && lastMessage.role !== msg.role)) {\n        formatted.push({\n          role: msg.role === 'system' ? 'user' : msg.role,\n          content: msg.content,\n        });\n      } else if (lastMessage) {\n        // Merge consecutive messages from same role\n        lastMessage.content += '\\\\n\\\\n' + msg.content;\n      }\n    });\n\n    // Ensure first message is from user\n    const firstMessage = formatted[0];\n    if (formatted.length > 0 && firstMessage && firstMessage.role === 'assistant') {\n      formatted.unshift({\n        role: 'user',\n        content: 'Continue the conversation.',\n      });\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Make HTTP request to Anthropic API\n   * Implements retry logic and error handling\n   */\n  private async makeRequest(endpoint: string, payload: any, retries: number = 3): Promise<AnthropicResponse> {\n    const url = `${this.baseURL}${endpoint}`;\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-api-key': this.apiKey,\n            'anthropic-version': this.anthropicVersion,\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error?.message || `HTTP ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        if (attempt === retries) {\n          throw error;\n        }\n\n        // Calculate exponential backoff\n        const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n        await this.delay(delay);\n      }\n    }\n\n    throw new Error('Max retries exceeded');\n  }\n\n  /**\n   * Format Claude response to standard format\n   * Implements response normalization\n   */\n  private formatResponse(response: AnthropicResponse, model: string): LLMResponse {\n    const content = response.content?.[0]?.text || '';\n    \n    return {\n      content,\n      role: response.role,\n      finishReason: response.stop_reason,\n      usage: {\n        promptTokens: response.usage.input_tokens,\n        completionTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        model,\n        estimatedCost: this.calculateCost(response.usage, model),\n      },\n      provider: 'anthropic',\n      model,\n      id: response.id,\n      ...(response.stop_sequence && { stopSequence: response.stop_sequence }),\n    };\n  }\n\n  /**\n   * Handle streaming response\n   * Implements Server-Sent Events parsing for Claude\n   */\n  private async *handleStreamResponse(response: Response): AsyncGenerator<AnthropicStreamChunk> {\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('No response body available for streaming');\n    }\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\\\n');\n      buffer = lines.pop() || '';\n\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          if (data === '[DONE]') {\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data);\n            if (parsed.type === 'content_block_delta' && parsed.delta?.text) {\n              yield {\n                content: parsed.delta.text,\n                role: 'assistant',\n                isStream: true,\n              };\n            }\n          } catch (e) {\n            console.error('Failed to parse stream data:', e);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calculate token usage cost\n   * Implements pricing calculation\n   */\n  private calculateCost(usage: { input_tokens: number; output_tokens: number }, model: string): number {\n    const config = this.modelConfigs[model];\n    if (!config) {\n      return 0;\n    }\n\n    const inputCost = (usage.input_tokens / 1000) * config.costPer1kInput;\n    const outputCost = (usage.output_tokens / 1000) * config.costPer1kOutput;\n\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Test API connection\n   * Implements connection validation\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.generateCompletion({\n        model: 'claude-3-haiku-20240307',\n        messages: [{ role: 'user', content: 'Hello' }],\n        maxTokens: 10,\n      });\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Handle API errors with specific error types\n   * Implements comprehensive error handling\n   */\n  private handleError(error: any): Error {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('api key')) {\n      return new Error('Invalid API key');\n    } else if (message.includes('rate limit')) {\n      return new Error('Rate limit exceeded. Please try again later.');\n    } else if (message.includes('quota')) {\n      return new Error('API quota exceeded');\n    } else if (message.includes('token') && message.includes('limit')) {\n      return new Error('Message too long for model context window');\n    } else {\n      return error;\n    }\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n} ","/**\n * GeminiProvider - Google Gemini API integration\n * Implements multimodal capabilities and function calling\n * Provides robust error handling and safety settings\n */\n\nimport { BaseLLMProvider, type ProviderConfig, type UsageStats } from './BaseLLMProvider';\nimport type { LLMRequest, LLMResponse } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface GeminiModelConfig {\n  maxTokens: number;\n  supportsVision: boolean;\n  supportsFunctions: boolean;\n  costPer1kInput: number;\n  costPer1kOutput: number;\n}\n\nexport interface GeminiMessage {\n  role: 'user' | 'model';\n  parts: Array<{\n    text?: string;\n    inlineData?: {\n      mimeType: string;\n      data: string;\n    };\n  }>;\n}\n\nexport interface GeminiCompletionParams {\n  prompt?: string;\n  context?: any;\n  callType?: any;\n  tone?: any;\n  model?: string;\n  messages?: any[];\n  systemPrompt?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  functions?: any[];\n  [key: string]: any;\n}\n\nexport interface GeminiResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n      role: string;\n    };\n    finishReason: string;\n    index: number;\n    safetyRatings: any[];\n  }>;\n  usageMetadata: {\n    promptTokenCount: number;\n    candidatesTokenCount: number;\n    totalTokenCount: number;\n  };\n}\n\n// =============================================================================\n// GEMINI PROVIDER CLASS\n// =============================================================================\n\n/**\n * GeminiProvider - Implements Google's Gemini API\n * Extends base provider with Gemini-specific features\n */\nexport class GeminiProvider extends BaseLLMProvider {\n  private readonly defaultSafetySettings: any[];\n\n  constructor(apiKey: string, config: ProviderConfig = {}) {\n    super(apiKey, config);\n\n    this.baseURL = 'https://generativelanguage.googleapis.com/v1beta';\n    this.models = config.models || ['gemini-pro', 'gemini-pro-vision', 'gemini-ultra'];\n\n    // Model-specific configurations\n    this.modelConfigs = {\n      'gemini-pro': {\n        maxTokens: 32768,\n        supportsVision: false,\n        supportsFunctions: true,\n        costPer1kInput: 0.0025,\n        costPer1kOutput: 0.0025,\n      },\n      'gemini-pro-vision': {\n        maxTokens: 32768,\n        supportsVision: true,\n        supportsFunctions: false,\n        costPer1kInput: 0.0025,\n        costPer1kOutput: 0.0025,\n      },\n      'gemini-ultra': {\n        maxTokens: 32768,\n        supportsVision: true,\n        supportsFunctions: true,\n        costPer1kInput: 0.01875,\n        costPer1kOutput: 0.01875,\n      },\n    };\n\n    // Safety settings\n    this.defaultSafetySettings = [\n      {\n        category: 'HARM_CATEGORY_HARASSMENT',\n        threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n      },\n      {\n        category: 'HARM_CATEGORY_HATE_SPEECH',\n        threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n      },\n      {\n        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n        threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n      },\n      {\n        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n        threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n      },\n    ];\n  }\n\n  /**\n   * Generate completion with Gemini API\n   * Implements multimodal content handling\n   */\n  async generateCompletion(params: LLMRequest | GeminiCompletionParams): Promise<LLMResponse> {\n    const {\n      model = 'gemini-pro',\n      messages,\n      temperature = 0.7,\n      maxTokens = 500,\n      stream = false,\n    } = params;\n    \n    const systemPrompt = 'systemPrompt' in params ? params.systemPrompt : undefined;\n    const functions = 'functions' in params ? params.functions : null;\n\n    // Validate model\n    if (!this.models.includes(model)) {\n      throw new Error(`Model ${model} not available for Gemini provider`);\n    }\n\n    // Format messages for Gemini\n    const messageArray = Array.isArray(messages) ? messages : [];\n    const contents = this.formatMessagesForGemini(messageArray, systemPrompt);\n\n    // Build request payload\n    const payload: any = {\n      contents,\n      generationConfig: {\n        temperature,\n        maxOutputTokens: maxTokens,\n        candidateCount: 1,\n      },\n      safetySettings: this.defaultSafetySettings,\n    };\n\n    // Add function declarations if supported\n    if (functions && this.modelConfigs[model]?.supportsFunctions) {\n      payload.tools = [\n        {\n          functionDeclarations: functions,\n        },\n      ];\n    }\n\n    try {\n      const endpoint = stream\n        ? `/models/${model}:streamGenerateContent`\n        : `/models/${model}:generateContent`;\n\n      const response = await this.makeRequest(endpoint, payload);\n\n      if (stream) {\n        return {\n          provider: 'gemini',\n          model,\n          isStream: true,\n          stream: this.handleStreamResponse(response as any),\n        };\n      } else {\n        return this.formatResponse(response, model);\n      }\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Format messages for Gemini API\n   * Implements Gemini-specific content structure\n   */\n  private formatMessagesForGemini(messages: any[], systemPrompt?: string): GeminiMessage[] {\n    const contents: GeminiMessage[] = [];\n\n    // Add system prompt as first user message if provided\n    if (systemPrompt) {\n      contents.push({\n        role: 'user',\n        parts: [\n          {\n            text: `System: ${systemPrompt}\\n\\nPlease follow these instructions in your responses.`,\n          },\n        ],\n      });\n      contents.push({\n        role: 'model',\n        parts: [{ text: 'Understood. I will follow these instructions.' }],\n      });\n    }\n\n    // Convert messages to Gemini format\n    messages.forEach((msg) => {\n      const role = msg.role === 'assistant' ? 'model' : 'user';\n\n      // Handle multimodal content\n      if (typeof msg.content === 'string') {\n        contents.push({\n          role: role as 'user' | 'model',\n          parts: [{ text: msg.content }],\n        });\n      } else if (Array.isArray(msg.content)) {\n        // Multimodal message with text and images\n        const parts = msg.content\n          .map((part: any) => {\n            if (part.type === 'text') {\n              return { text: part.text };\n            } else if (part.type === 'image') {\n              return {\n                inlineData: {\n                  mimeType: part.mimeType || 'image/jpeg',\n                  data: part.data, // Base64 encoded\n                },\n              };\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        contents.push({ role: role as 'user' | 'model', parts });\n      }\n    });\n\n    return contents;\n  }\n\n  /**\n   * Make HTTP request to Gemini API\n   * Implements API key authentication\n   */\n  private async makeRequest(endpoint: string, payload: any, retries: number = 3): Promise<GeminiResponse> {\n    const url = `${this.baseURL}${endpoint}?key=${this.apiKey}`;\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error?.message || `HTTP ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        if (attempt === retries) {\n          throw error;\n        }\n\n        // Calculate exponential backoff\n        const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n        await this.delay(delay);\n      }\n    }\n\n    throw new Error('Max retries exceeded');\n  }\n\n  /**\n   * Format Gemini response to standard format\n   * Implements response normalization\n   */\n  private formatResponse(response: GeminiResponse, model: string): LLMResponse {\n    const candidate = response.candidates?.[0];\n    \n    if (!candidate) {\n      throw new Error('No candidates in Gemini response');\n    }\n\n    const content = candidate.content?.parts?.[0]?.text || '';\n\n    return {\n      content,\n      role: 'assistant',\n      finishReason: candidate.finishReason,\n      usage: {\n        promptTokens: response.usageMetadata?.promptTokenCount || 0,\n        completionTokens: response.usageMetadata?.candidatesTokenCount || 0,\n        totalTokens: response.usageMetadata?.totalTokenCount || 0,\n        model,\n        estimatedCost: this.calculateCost({\n          promptTokens: response.usageMetadata?.promptTokenCount || 0,\n          completionTokens: response.usageMetadata?.candidatesTokenCount || 0,\n          totalTokens: response.usageMetadata?.totalTokenCount || 0,\n        }, model),\n      },\n      provider: 'gemini',\n      model,\n      safetyRatings: candidate.safetyRatings,\n    };\n  }\n\n  /**\n   * Handle streaming response\n   * Implements Server-Sent Events parsing for Gemini\n   */\n  private async *handleStreamResponse(response: Response): AsyncGenerator<any> {\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('No response body available for streaming');\n    }\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || '';\n\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          if (data === '[DONE]') {\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data);\n            if (parsed.candidates?.[0]?.content?.parts?.[0]?.text) {\n              yield {\n                content: parsed.candidates[0].content.parts[0].text,\n                role: 'assistant',\n                isStream: true,\n              };\n            }\n          } catch (e) {\n            console.error('Failed to parse stream data:', e);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calculate token usage cost\n   * Implements pricing calculation\n   */\n  private calculateCost(usage: UsageStats, model: string): number {\n    const config = this.modelConfigs[model];\n    if (!config) {\n      return 0;\n    }\n\n    const inputCost = (usage.promptTokens / 1000) * config.costPer1kInput;\n    const outputCost = (usage.completionTokens / 1000) * config.costPer1kOutput;\n\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Test API connection\n   * Implements connection validation\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.generateCompletion({\n        model: 'gemini-pro',\n        messages: [{ role: 'user', content: 'Hello' }],\n        maxTokens: 10,\n      });\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Handle API errors with specific error types\n   * Implements comprehensive error handling\n   */\n  private handleError(error: any): Error {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('api key')) {\n      return new Error('Invalid API key');\n    } else if (message.includes('quota')) {\n      return new Error('API quota exceeded');\n    } else if (message.includes('safety')) {\n      return new Error('Content blocked by safety filters');\n    } else {\n      return error;\n    }\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n} ","/**\n * OpenAI Provider - Enterprise-grade OpenAI API integration\n * Implements streaming, function calling, and vision capabilities\n * Provides robust error handling and retry mechanisms\n */\n\nimport { BaseLLMProvider, type ProviderConfig, type UsageStats } from './BaseLLMProvider';\nimport type { LLMRequest, LLMResponse } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface OpenAIModelConfig {\n  maxTokens: number;\n  supportsVision: boolean;\n  supportsFunctions: boolean;\n  costPer1kInput: number;\n  costPer1kOutput: number;\n}\n\nexport interface OpenAIMessage {\n  role: 'system' | 'user' | 'assistant' | 'function';\n  content: string;\n  name?: string;\n  function_call?: {\n    name: string;\n    arguments: string;\n  };\n}\n\nexport interface OpenAIFunction {\n  name: string;\n  description?: string;\n  parameters: Record<string, any>;\n}\n\nexport interface OpenAICompletionParams extends LLMRequest {\n  model?: string;\n  messages: OpenAIMessage[];\n  systemPrompt?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  functions?: OpenAIFunction[];\n  functionCall?: string | { name: string };\n}\n\nexport interface OpenAIResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n      function_call?: {\n        name: string;\n        arguments: string;\n      };\n    };\n    finish_reason: string;\n  }>;\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport interface OpenAIStreamChunk {\n  content: string;\n  role: string;\n  isStream: boolean;\n}\n\nexport interface ConnectionTestResult {\n  success: boolean;\n  message: string;\n  model?: string;\n}\n\n// =============================================================================\n// OPENAI PROVIDER CLASS\n// =============================================================================\n\n/**\n * OpenAIProvider - Implements OpenAI-specific API integration\n * Extends base provider with OpenAI's unique features\n */\nexport class OpenAIProvider extends BaseLLMProvider {\n\n  constructor(apiKey: string, config: ProviderConfig = {}) {\n    super(apiKey, config);\n\n    this.baseURL = 'https://api.openai.com/v1';\n    this.models = config.models || [\n      'gpt-4-turbo-preview',\n      'gpt-4-vision-preview',\n      'gpt-3.5-turbo',\n      'gpt-3.5-turbo-16k',\n    ];\n\n    // Model-specific configurations\n    this.modelConfigs = {\n      'gpt-4-turbo-preview': {\n        maxTokens: 128000,\n        supportsVision: false,\n        supportsFunctions: true,\n        costPer1kInput: 0.01,\n        costPer1kOutput: 0.03,\n      },\n      'gpt-4-vision-preview': {\n        maxTokens: 128000,\n        supportsVision: true,\n        supportsFunctions: false,\n        costPer1kInput: 0.01,\n        costPer1kOutput: 0.03,\n      },\n      'gpt-3.5-turbo': {\n        maxTokens: 4096,\n        supportsVision: false,\n        supportsFunctions: true,\n        costPer1kInput: 0.0005,\n        costPer1kOutput: 0.0015,\n      },\n      'gpt-3.5-turbo-16k': {\n        maxTokens: 16384,\n        supportsVision: false,\n        supportsFunctions: true,\n        costPer1kInput: 0.003,\n        costPer1kOutput: 0.004,\n      },\n    };\n  }\n\n  /**\n   * Generate completion with OpenAI Chat Completions API\n   * Implements streaming and function calling support\n   */\n  async generateCompletion(params: LLMRequest): Promise<LLMResponse> {\n    const {\n      model = 'gpt-3.5-turbo',\n      messages: rawMessages,\n      systemMessage,\n      temperature = 0.7,\n      maxTokens = 500,\n      stream = false,\n      tools = null,\n    } = params;\n\n    // Convert to OpenAI format\n    const messages: OpenAIMessage[] = rawMessages ? \n      rawMessages.map((msg: any) => ({\n        role: msg.role || 'user',\n        content: msg.content || ''\n      })) : \n      [{ role: 'user', content: params.prompt || '' }];\n\n    // Validate model availability\n    if (!this.models.includes(model)) {\n      throw new Error(`Model ${model} not available for OpenAI provider`);\n    }\n\n    // Construct messages array with system prompt\n    const fullMessages: OpenAIMessage[] = [];\n    if (systemMessage) {\n      fullMessages.push({ role: 'system', content: systemMessage });\n    }\n    fullMessages.push(...messages);\n\n    // Build request payload\n    const payload: any = {\n      model,\n      messages: fullMessages,\n      temperature,\n      max_tokens: maxTokens,\n      stream,\n    };\n\n    // Add function calling if supported\n    if (tools && this.modelConfigs[model]?.supportsFunctions) {\n      payload.functions = tools;\n      // Note: function_call handling can be added here if needed\n    }\n\n    try {\n      const response = await this.makeRequest('/chat/completions', payload);\n\n      if (stream) {\n        return {\n          provider: 'openai',\n          model,\n          isStream: true,\n          stream: this.handleStreamResponse(response as any),\n        };\n      } else {\n        return this.formatResponse(response, model);\n      }\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Make HTTP request to OpenAI API\n   * Implements retry logic and error handling\n   */\n  private async makeRequest(endpoint: string, payload: any, retries: number = 3): Promise<OpenAIResponse> {\n    const url = `${this.baseURL}${endpoint}`;\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.apiKey}`,\n            'OpenAI-Beta': 'assistants=v1',\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error?.message || `HTTP ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        if (attempt === retries) {\n          throw error;\n        }\n\n        // Calculate exponential backoff\n        const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n        await this.delay(delay);\n      }\n    }\n\n    throw new Error('Max retries exceeded');\n  }\n\n  /**\n   * Format OpenAI response to standard format\n   * Implements response normalization\n   */\n  private formatResponse(response: OpenAIResponse, model: string): LLMResponse {\n    const choice = response.choices?.[0];\n    \n    if (!choice) {\n      throw new Error('No choices in OpenAI response');\n    }\n\n    return {\n      content: choice.message?.content || '',\n      role: choice.message?.role || 'assistant',\n      functionCall: choice.message?.function_call,\n      finishReason: choice.finish_reason || 'unknown',\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n        model,\n        estimatedCost: this.calculateCost({\n          promptTokens: response.usage?.prompt_tokens || 0,\n          completionTokens: response.usage?.completion_tokens || 0,\n          totalTokens: response.usage?.total_tokens || 0,\n        }, model),\n      },\n      provider: 'openai',\n      model,\n      id: response.id,\n      created: response.created,\n      choices: response.choices,\n    };\n  }\n\n  /**\n   * Handle streaming response\n   * Implements Server-Sent Events parsing\n   */\n  private async *handleStreamResponse(response: Response): AsyncGenerator<OpenAIStreamChunk> {\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('No response body available for streaming');\n    }\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || '';\n\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          if (data === '[DONE]') {\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data);\n            if (parsed.choices[0].delta.content) {\n              yield {\n                content: parsed.choices[0].delta.content,\n                role: 'assistant',\n                isStream: true,\n              };\n            }\n          } catch (e) {\n            console.error('Failed to parse stream data:', e);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calculate token usage cost\n   * Implements pricing calculation\n   */\n  private calculateCost(usage: UsageStats, model: string): number {\n    const config = this.modelConfigs[model];\n    if (!config) {\n      return 0;\n    }\n\n    const inputCost = (usage.promptTokens / 1000) * config.costPer1kInput;\n    const outputCost = (usage.completionTokens / 1000) * config.costPer1kOutput;\n\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Test API connection\n   * Implements connection validation\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.generateCompletion({\n        prompt: 'Hello',\n        context: {\n          currentTopic: 'test',\n          conversationHistory: [],\n          relevantDocuments: [],\n          participantContext: {},\n          meetingPhase: 'opening'\n        },\n        callType: 'interview',\n        tone: 'professional',\n        model: 'gpt-3.5-turbo',\n        maxTokens: 10,\n      });\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Handle API errors with specific error types\n   * Implements comprehensive error handling\n   */\n  private handleError(error: any): Error {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('api key')) {\n      return new Error('Invalid API key');\n    } else if (message.includes('rate limit')) {\n      return new Error('Rate limit exceeded. Please try again later.');\n    } else if (message.includes('quota')) {\n      return new Error('API quota exceeded');\n    } else if (message.includes('context length')) {\n      return new Error('Message too long for model context window');\n    } else {\n      return error;\n    }\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get detailed connection test result\n   */\n  async getConnectionTestResult(): Promise<ConnectionTestResult> {\n    try {\n      const response = await this.generateCompletion({\n        prompt: 'Hello',\n        context: {\n          currentTopic: 'test',\n          conversationHistory: [],\n          relevantDocuments: [],\n          participantContext: {},\n          meetingPhase: 'opening'\n        },\n        callType: 'interview',\n        tone: 'professional',\n        model: 'gpt-3.5-turbo',\n        maxTokens: 10,\n      });\n\n      return {\n        success: true,\n        message: 'Connection successful',\n        model: response.model,\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n} ","/**\n * ContextManager - Advanced context awareness and entity extraction system\n * Implements State pattern with context enrichment and entity recognition\n * Provides comprehensive conversation context management\n */\n\nimport { SecureStorage, StorageNamespaces } from '../utils/storage';\nimport { ResumeParser } from './resumeParser';\nimport type { SessionMetadata } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface EntityPattern {\n  patterns: RegExp[];\n  keywords: string[];\n}\n\nexport interface EntityExtraction {\n  [key: string]: string[];\n}\n\nexport interface ConversationEntry {\n  timestamp: number;\n  speaker?: string;\n  text: string;\n  isQuestion?: boolean;\n  entities: EntityExtraction;\n  keywords: string[];\n}\n\nexport interface KeyTopic {\n  keyword: string;\n  frequency: number;\n  firstMentioned: number;\n  lastMentioned: number;\n}\n\nexport interface ContextInsights {\n  interviewDuration: number;\n  averageResponseTime?: number;\n  topSkillsDiscussed: string[];\n  matchScore: number;\n}\n\nexport interface SessionContext {\n  sessionId: string;\n  platform: string;\n  startTime: number;\n  resume: any;\n  jobDescription: any;\n  conversationHistory: ConversationEntry[];\n  detectedEntities: Record<string, Set<string>>;\n  keyTopics: KeyTopic[];\n  questionCount: number;\n  currentQuestion: string | null;\n  insights?: ContextInsights;\n}\n\nexport interface ContextUpdate {\n  sessionId: string;\n  transcription: string;\n  isQuestion?: boolean;\n  speaker?: string;\n}\n\n/**\n * Entity types for structured extraction\n */\nexport const EntityTypes = {\n  COMPANY: 'company',\n  ROLE: 'role',\n  SKILL: 'skill',\n  TECHNOLOGY: 'technology',\n  INTERVIEWER: 'interviewer',\n  PROJECT: 'project',\n  METRIC: 'metric',\n} as const;\n\nexport type EntityType = (typeof EntityTypes)[keyof typeof EntityTypes];\n\n// =============================================================================\n// CONTEXT MANAGER CLASS\n// =============================================================================\n\n/**\n * ContextManager - Manages conversation context and entity extraction\n * Implements context enrichment with resume and job description integration\n */\nexport class ContextManager {\n  private readonly storage: SecureStorage;\n  private readonly resumeParser: ResumeParser;\n  private readonly sessionContexts: Map<string, SessionContext>;\n  private readonly entityPatterns: Record<string, EntityPattern>;\n\n  constructor() {\n    this.storage = new SecureStorage();\n    this.resumeParser = new ResumeParser();\n\n    // Context state containers\n    this.sessionContexts = new Map();\n\n    // Entity extraction patterns\n    this.entityPatterns = this.initializeEntityPatterns();\n\n    // Load persisted context data\n    this.loadPersistedContext();\n  }\n\n  /**\n   * Initialize entity extraction patterns with NLP heuristics\n   * Implements pattern matching for various entity types\n   */\n  private initializeEntityPatterns(): Record<string, EntityPattern> {\n    return {\n      [EntityTypes.COMPANY]: {\n        patterns: [\n          /(?:work(?:ed|ing)?\\s+(?:at|for)|employed\\s+by|join(?:ed|ing)?)\\s+([A-Z][\\w\\s&]+)/gi,\n          /(?:at|with)\\s+([A-Z][\\w\\s&]+)\\s+(?:Inc|LLC|Corp|Company|Limited|Ltd)/gi,\n        ],\n        keywords: ['company', 'employer', 'organization', 'firm'],\n      },\n      [EntityTypes.ROLE]: {\n        patterns: [\n          /(?:position|role|title)(?:\\s+is|\\s+was|\\s+of)?\\s+([A-Z][\\w\\s]+(?:Engineer|Developer|Manager|Analyst|Designer))/gi,\n          /(?:as|working\\s+as)\\s+(?:a|an)?\\s+([A-Z][\\w\\s]+)/gi,\n        ],\n        keywords: ['position', 'role', 'title', 'job'],\n      },\n      [EntityTypes.SKILL]: {\n        patterns: [\n          /(?:experience|proficient|skilled|expertise)\\s+(?:in|with)\\s+([\\w\\s,+#]+)/gi,\n          /(?:using|know|familiar\\s+with)\\s+([\\w\\s,+#]+)/gi,\n        ],\n        keywords: ['skill', 'expertise', 'proficiency', 'experience'],\n      },\n      [EntityTypes.TECHNOLOGY]: {\n        patterns: [\n          /\\b(React|Angular|Vue|Node\\.?js|Python|Java|JavaScript|TypeScript|AWS|Azure|GCP|Docker|Kubernetes)\\b/gi,\n          /\\b([A-Z][\\w]+(?:\\.js|DB|SQL))\\b/g,\n        ],\n        keywords: ['technology', 'framework', 'language', 'tool'],\n      },\n    };\n  }\n\n  /**\n   * Create new session context with initial metadata\n   * Implements Factory pattern for context creation\n   */\n  async createSessionContext(metadata: SessionMetadata): Promise<SessionContext> {\n    const sessionId = metadata.sessionId || crypto.randomUUID();\n\n    // Load resume and job description data\n    const resumeData = await this.storage.get('resumeData', {\n      namespace: StorageNamespaces.RESUME_DATA,\n    });\n\n    const jobDescriptions = await this.storage.get('jobDescriptions', {\n      namespace: StorageNamespaces.RESUME_DATA,\n    });\n\n    const context: SessionContext = {\n      sessionId,\n      platform: metadata.platform || 'unknown',\n      startTime: Date.now(),\n      resume: resumeData,\n      jobDescription: jobDescriptions?.[0], // Use most recent job description\n      conversationHistory: [],\n      detectedEntities: {\n        [EntityTypes.COMPANY]: new Set(),\n        [EntityTypes.ROLE]: new Set(),\n        [EntityTypes.SKILL]: new Set(),\n        [EntityTypes.TECHNOLOGY]: new Set(),\n        [EntityTypes.INTERVIEWER]: new Set(),\n        [EntityTypes.PROJECT]: new Set(),\n        [EntityTypes.METRIC]: new Set(),\n      },\n      keyTopics: [],\n      questionCount: 0,\n      currentQuestion: null,\n    };\n\n    this.sessionContexts.set(sessionId, context);\n    await this.persistContext(sessionId, context);\n\n    return context;\n  }\n\n  /**\n   * Enrich context with additional data and insights\n   * Implements Decorator pattern for context enhancement\n   */\n  async enrichContext(baseContext: any): Promise<SessionContext> {\n    const sessionId = baseContext.sessionId;\n    const context =\n      this.sessionContexts.get(sessionId) || (await this.createSessionContext(baseContext));\n\n    // Merge base context with stored context\n    const enrichedContext: SessionContext = {\n      ...context,\n      ...baseContext,\n\n      // Add derived insights\n      insights: {\n        interviewDuration: Date.now() - context.startTime,\n        averageResponseTime: this.calculateAverageResponseTime(context),\n        topSkillsDiscussed: this.identifyTopSkills(context),\n        matchScore: this.calculateJobMatchScore(context),\n      },\n    };\n\n    // Update session context\n    this.sessionContexts.set(sessionId, enrichedContext);\n\n    return enrichedContext;\n  }\n\n  /**\n   * Update context with new transcription data\n   * Implements Observer pattern for reactive updates\n   */\n  async updateContext(update: ContextUpdate): Promise<SessionContext | undefined> {\n    const { sessionId, transcription, isQuestion, speaker } = update;\n    const context = this.sessionContexts.get(sessionId);\n\n    if (!context) {\n      console.error('Context not found for session:', sessionId);\n      return;\n    }\n\n    // Extract entities from transcription\n    const extractedEntities = this.extractEntities(transcription);\n\n    // Update detected entities\n    for (const [type, entities] of Object.entries(extractedEntities)) {\n      const entitySet = context.detectedEntities[type];\n      if (entitySet) {\n        entities.forEach((entity) => entitySet.add(entity));\n      }\n    }\n\n    // Update conversation history\n    const entry: ConversationEntry = {\n      timestamp: Date.now(),\n      text: transcription,\n      entities: extractedEntities,\n      keywords: this.extractKeywords(transcription),\n      ...(speaker && { speaker }),\n      ...(isQuestion !== undefined && { isQuestion }),\n    };\n\n    context.conversationHistory.push(entry);\n\n    if (isQuestion) {\n      context.questionCount++;\n      context.currentQuestion = transcription;\n    }\n\n    // Update key topics\n    this.updateKeyTopics(context, entry.keywords);\n\n    // Persist updated context\n    await this.persistContext(sessionId, context);\n\n    return context;\n  }\n\n  /**\n   * Extract entities from text using pattern matching and NLP\n   * Implements Named Entity Recognition (NER) algorithms\n   */\n  private extractEntities(text: string): EntityExtraction {\n    const entities: Record<string, Set<string>> = {};\n\n    for (const [type, config] of Object.entries(this.entityPatterns)) {\n      entities[type] = new Set();\n\n      // Apply regex patterns\n      config.patterns.forEach((pattern) => {\n        const matches = text.matchAll(pattern);\n        for (const match of matches) {\n          if (match[1] && entities[type]) {\n            entities[type].add(match[1].trim());\n          }\n        }\n      });\n\n      // Apply keyword-based extraction\n      if (config.keywords.some((keyword) => text.toLowerCase().includes(keyword))) {\n        // Extract following words as potential entities\n        const words = text.split(/\\s+/);\n        words.forEach((word, index) => {\n          if (config.keywords.includes(word.toLowerCase()) && index < words.length - 1) {\n            // Look ahead for capitalized words\n            let entity = '';\n            for (let i = index + 1; i < Math.min(index + 4, words.length); i++) {\n              const word = words[i];\n              if (word && word[0] && word[0] === word[0].toUpperCase()) {\n                entity += word + ' ';\n              } else {\n                break;\n              }\n            }\n            if (entity.trim() && entities[type]) {\n              entities[type].add(entity.trim());\n            }\n          }\n        });\n      }\n    }\n\n    // Convert Sets to Arrays for serialization\n    const result: EntityExtraction = {};\n    for (const [type, entitySet] of Object.entries(entities)) {\n      result[type] = Array.from(entitySet);\n    }\n\n    return result;\n  }\n\n  /**\n   * Extract keywords using TF-IDF inspired algorithm\n   * Implements statistical keyword extraction\n   */\n  private extractKeywords(text: string): string[] {\n    const stopWords = new Set([\n      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',\n      'from', 'as', 'is', 'was', 'are', 'were', 'been', 'have', 'has', 'had', 'do', 'does', 'did',\n      'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'could', 'this', 'that',\n      'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'what', 'which',\n    ]);\n\n    const words = text\n      .toLowerCase()\n      .split(/\\W+/)\n      .filter((word) => word.length > 2 && !stopWords.has(word));\n\n    // Count word frequencies\n    const wordFreq: Record<string, number> = {};\n    words.forEach((word) => {\n      wordFreq[word] = (wordFreq[word] || 0) + 1;\n    });\n\n    // Sort by frequency and return top keywords\n    return Object.entries(wordFreq)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([word]) => word);\n  }\n\n  /**\n   * Update key topics based on conversation flow\n   * Implements topic modeling heuristics\n   */\n  private updateKeyTopics(context: SessionContext, keywords: string[]): void {\n    keywords.forEach((keyword) => {\n      const existingTopic = context.keyTopics.find((topic) => topic.keyword === keyword);\n\n      if (existingTopic) {\n        existingTopic.frequency++;\n        existingTopic.lastMentioned = Date.now();\n      } else {\n        context.keyTopics.push({\n          keyword,\n          frequency: 1,\n          firstMentioned: Date.now(),\n          lastMentioned: Date.now(),\n        });\n      }\n    });\n\n    // Keep only top 10 topics by frequency\n    context.keyTopics.sort((a, b) => b.frequency - a.frequency);\n    context.keyTopics = context.keyTopics.slice(0, 10);\n  }\n\n  /**\n   * Calculate average response time for context insights\n   */\n  private calculateAverageResponseTime(context: SessionContext): number {\n    const questionTimestamps: number[] = [];\n    const responseTimestamps: number[] = [];\n\n    context.conversationHistory.forEach((entry) => {\n      if (entry.isQuestion) {\n        questionTimestamps.push(entry.timestamp);\n      } else {\n        responseTimestamps.push(entry.timestamp);\n      }\n    });\n\n    if (questionTimestamps.length === 0 || responseTimestamps.length === 0) {\n      return 0;\n    }\n\n    let totalResponseTime = 0;\n    let validResponses = 0;\n\n    for (let i = 0; i < questionTimestamps.length; i++) {\n      // Find the next response after this question\n      const questionTime = questionTimestamps[i];\n      if (questionTime !== undefined) {\n        const nextResponse = responseTimestamps.find(\n          (responseTime) => responseTime > questionTime\n        );\n        if (nextResponse) {\n          totalResponseTime += nextResponse - questionTime;\n          validResponses++;\n        }\n      }\n    }\n\n    return validResponses > 0 ? totalResponseTime / validResponses : 0;\n  }\n\n  /**\n   * Identify top skills discussed in the context\n   */\n  private identifyTopSkills(context: SessionContext): string[] {\n    const skillEntities = context.detectedEntities[EntityTypes.SKILL];\n    const technologyEntities = context.detectedEntities[EntityTypes.TECHNOLOGY];\n    \n    const allSkills = [\n      ...(skillEntities ? Array.from(skillEntities) : []),\n      ...(technologyEntities ? Array.from(technologyEntities) : [])\n    ];\n    \n    // Return top 5 most mentioned skills\n    return allSkills.slice(0, 5);\n  }\n\n  /**\n   * Calculate job match score based on context analysis\n   * Implements scoring algorithm for fit assessment\n   */\n  private calculateJobMatchScore(context: SessionContext): number {\n    if (!context.resume || !context.jobDescription) {\n      return 0;\n    }\n\n    const resumeSkills = new Set<string>(context.resume.structured?.skills || []);\n    const requiredSkills = new Set<string>(context.jobDescription.requirements || []);\n    const discussedSkills = context.detectedEntities[EntityTypes.SKILL];\n\n    let matchedSkills = 0;\n    let discussedRelevantSkills = 0;\n\n    requiredSkills.forEach((skill: string) => {\n      if (resumeSkills.has(skill)) {\n        matchedSkills++;\n      }\n      if (discussedSkills && discussedSkills.has(skill)) {\n        discussedRelevantSkills++;\n      }\n    });\n\n    const baseScore = requiredSkills.size > 0 ? matchedSkills / requiredSkills.size : 0;\n    const discussionBonus =\n      requiredSkills.size > 0 ? (discussedRelevantSkills / requiredSkills.size) * 0.2 : 0;\n\n    return Math.min(baseScore + discussionBonus, 1.0);\n  }\n\n  /**\n   * Persist context to storage for recovery\n   * Implements persistence layer with serialization\n   */\n  private async persistContext(sessionId: string, context: SessionContext): Promise<void> {\n    // Convert Sets to Arrays for serialization\n    const serializable = {\n      ...context,\n      detectedEntities: {} as Record<string, string[]>,\n    };\n\n    for (const [type, entitySet] of Object.entries(context.detectedEntities)) {\n      serializable.detectedEntities[type] = Array.from(entitySet);\n    }\n\n    await this.storage.set(`context_${sessionId}`, serializable, {\n      namespace: StorageNamespaces.CONTEXT_CACHE,\n    });\n  }\n\n  /**\n   * Load persisted context data on initialization\n   * Implements recovery mechanism for session continuity\n   */\n  private async loadPersistedContext(): Promise<void> {\n    const keys = await this.storage.getNamespaceKeys(StorageNamespaces.CONTEXT_CACHE);\n\n    for (const key of keys) {\n      const keyParts = key.split(':');\n      const contextKey = keyParts[1];\n      if (contextKey) {\n        const context = await this.storage.get(contextKey, {\n          namespace: StorageNamespaces.CONTEXT_CACHE,\n        });\n\n        if (context && context.sessionId) {\n          // Restore Sets from Arrays\n          for (const [type, entities] of Object.entries(context.detectedEntities)) {\n            if (Array.isArray(entities)) {\n              context.detectedEntities[type] = new Set(entities);\n            }\n          }\n\n          this.sessionContexts.set(context.sessionId, context);\n        }\n      }\n    }\n  }\n} ","/**\n * DocumentManager - Advanced Multi-Document Management Service\n * Handles upload, parsing, storage, and intelligent retrieval of multiple documents\n * Supports PDF, DOCX, TXT, and other formats with enterprise-grade processing\n */\n\nimport type {\n  DocumentMetadata,\n  DocumentContent,\n  DocumentChunk,\n  ExtractedEntity,\n  ProcessingStatus,\n  CallType,\n  ToneType,\n  DocumentType,\n  PriorityLevel,\n  SuggestionContext\n} from '../types/index';\n\nimport {\n  MAX_DOCUMENTS,\n  MAX_DOCUMENT_SIZE,\n  SUPPORTED_DOCUMENT_FORMATS,\n  DOCUMENT_PROCESSING_CONFIG,\n  CALL_TYPE_CONFIGS,\n  DOCUMENT_TYPES,\n  PRIORITY_LEVELS\n} from '../utils/constants';\n\nimport { SecureStorage, StorageNamespaces } from '../utils/storage';\nimport { ResumeParser } from './resumeParser';\n\n// =============================================================================\n// DOCUMENT PROCESSING INTERFACES\n// =============================================================================\n\ninterface DocumentProcessingResult {\n  readonly success: boolean;\n  readonly document?: DocumentContent;\n  readonly error?: string;\n  readonly processingTime: number;\n}\n\ninterface DocumentSearchResult {\n  readonly document: DocumentContent;\n  readonly relevanceScore: number;\n  readonly matchingChunks: readonly DocumentChunk[];\n  readonly reason: string;\n}\n\ninterface ProcessingQueue {\n  readonly id: string;\n  readonly file: File;\n  readonly metadata: DocumentMetadata;\n  readonly priority: PriorityLevel;\n  readonly retryCount: number;\n}\n\n// =============================================================================\n// DOCUMENT MANAGER SERVICE\n// =============================================================================\n\nexport class DocumentManager {\n  private readonly storage: SecureStorage;\n  private readonly resumeParser: ResumeParser;\n  private readonly processingQueue: Map<string, ProcessingQueue> = new Map();\n  private readonly activeProcessing: Set<string> = new Set();\n  private readonly documentCache: Map<string, DocumentContent> = new Map();\n  \n  private readonly MAX_QUEUE_SIZE = 10;\n  private readonly RETRY_LIMIT = 3;\n  private readonly CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor() {\n    this.storage = new SecureStorage();\n    this.resumeParser = new ResumeParser();\n    this.initializeDocumentProcessing();\n  }\n\n  // =============================================================================\n  // DOCUMENT UPLOAD & VALIDATION\n  // =============================================================================\n\n  /**\n   * Upload and validate multiple documents\n   * Implements enterprise-grade file validation and queue management\n   */\n  async uploadDocuments(\n    files: FileList,\n    callType: CallType,\n    sessionId: string\n  ): Promise<{\n    readonly success: boolean;\n    readonly uploaded: readonly DocumentMetadata[];\n    readonly errors: readonly string[];\n  }> {\n    const results: DocumentMetadata[] = [];\n    const errors: string[] = [];\n\n    // Validate total document count\n    const existingDocs = await this.getSessionDocuments(sessionId);\n    if (existingDocs.length + files.length > MAX_DOCUMENTS) {\n      return {\n        success: false,\n        uploaded: [],\n        errors: [`Maximum ${MAX_DOCUMENTS} documents allowed per session`]\n      };\n    }\n\n    // Process each file\n    for (const file of Array.from(files)) {\n      try {\n        const validation = this.validateDocument(file);\n        if (!validation.valid) {\n          errors.push(`${file.name}: ${validation.error}`);\n          continue;\n        }\n\n        const metadata = await this.createDocumentMetadata(file, callType);\n        await this.queueDocumentProcessing(file, metadata);\n        results.push(metadata);\n\n      } catch (error) {\n        errors.push(`${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    return {\n      success: results.length > 0,\n      uploaded: results,\n      errors\n    };\n  }\n\n  /**\n   * Validate document format, size, and content\n   */\n  private validateDocument(file: File): { valid: boolean; error?: string } {\n    // Check file size\n    if (file.size > MAX_DOCUMENT_SIZE) {\n      return {\n        valid: false,\n        error: `File size ${(file.size / 1024 / 1024).toFixed(1)}MB exceeds limit of ${MAX_DOCUMENT_SIZE / 1024 / 1024}MB`\n      };\n    }\n\n    // Check file format\n    const extension = file.name.split('.').pop()?.toLowerCase();\n    if (!extension || !SUPPORTED_DOCUMENT_FORMATS.includes(extension)) {\n      return {\n        valid: false,\n        error: `Unsupported format. Supported: ${SUPPORTED_DOCUMENT_FORMATS.join(', ')}`\n      };\n    }\n\n    // Check file name length\n    if (file.name.length > 255) {\n      return {\n        valid: false,\n        error: 'File name too long (max 255 characters)'\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create document metadata with intelligent type detection\n   */\n  private async createDocumentMetadata(\n    file: File,\n    callType: CallType\n  ): Promise<DocumentMetadata> {\n    const id = this.generateDocumentId();\n    const detectedType = this.detectDocumentType(file.name, callType);\n    const priority = this.calculateDocumentPriority(detectedType, callType);\n\n    return {\n      id,\n      name: file.name,\n      type: detectedType,\n      size: file.size,\n      format: file.name.split('.').pop()?.toLowerCase() || 'unknown',\n      uploadDate: new Date(),\n      lastModified: new Date(file.lastModified),\n      priority,\n      tags: this.generateTags(file.name, detectedType),\n      checksum: await this.calculateChecksum(file)\n    };\n  }\n\n  // =============================================================================\n  // DOCUMENT PROCESSING & PARSING\n  // =============================================================================\n\n  /**\n   * Queue document for background processing\n   */\n  private async queueDocumentProcessing(\n    file: File,\n    metadata: DocumentMetadata\n  ): Promise<void> {\n    if (this.processingQueue.size >= this.MAX_QUEUE_SIZE) {\n      throw new Error('Processing queue is full. Please wait for current documents to finish processing.');\n    }\n\n    const queueItem: ProcessingQueue = {\n      id: metadata.id,\n      file,\n      metadata,\n      priority: metadata.priority,\n      retryCount: 0\n    };\n\n    this.processingQueue.set(metadata.id, queueItem);\n    \n    // Start processing if under concurrent limit\n    if (this.activeProcessing.size < DOCUMENT_PROCESSING_CONFIG.MAX_CONCURRENT_PROCESSING) {\n      void this.processNextInQueue();\n    }\n  }\n\n  /**\n   * Process documents from queue with priority ordering\n   */\n  private async processNextInQueue(): Promise<void> {\n    if (this.processingQueue.size === 0 || \n        this.activeProcessing.size >= DOCUMENT_PROCESSING_CONFIG.MAX_CONCURRENT_PROCESSING) {\n      return;\n    }\n\n    // Find highest priority item\n    const queueArray = Array.from(this.processingQueue.values());\n    const priorityOrder = [\n      PRIORITY_LEVELS.CRITICAL,\n      PRIORITY_LEVELS.HIGH,\n      PRIORITY_LEVELS.MEDIUM,\n      PRIORITY_LEVELS.LOW,\n      PRIORITY_LEVELS.BACKGROUND\n    ];\n\n    let nextItem: ProcessingQueue | undefined;\n    for (const priority of priorityOrder) {\n      nextItem = queueArray.find(item => item.priority === priority);\n      if (nextItem) break;\n    }\n\n    if (!nextItem) return;\n\n    this.processingQueue.delete(nextItem.id);\n    this.activeProcessing.add(nextItem.id);\n\n    try {\n      await this.processDocument(nextItem);\n    } finally {\n      this.activeProcessing.delete(nextItem.id);\n      // Process next item in queue\n      void this.processNextInQueue();\n    }\n  }\n\n  /**\n   * Process individual document with comprehensive parsing\n   */\n  private async processDocument(queueItem: ProcessingQueue): Promise<DocumentProcessingResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Extract text content based on file type\n      const rawText = await this.extractTextContent(queueItem.file);\n      \n      // Parse structured data\n      const structuredData = await this.parseStructuredData(\n        rawText,\n        queueItem.metadata.type,\n        queueItem.file\n      );\n\n      // Create document chunks for vector search\n      const chunks = this.createDocumentChunks(rawText);\n\n      // Extract entities\n      const extractedEntities = await this.extractEntities(rawText);\n\n      // Generate summary and key points\n      const summary = await this.generateSummary(rawText, queueItem.metadata.type);\n      const keyPoints = await this.extractKeyPoints(rawText, queueItem.metadata.type);\n\n      const documentContent: DocumentContent = {\n        id: queueItem.metadata.id,\n        rawText,\n        structuredData,\n        chunks,\n        extractedEntities,\n        summary,\n        keyPoints,\n        processingStatus: 'completed'\n      };\n\n      // Store document\n      await this.storeDocument(queueItem.metadata, documentContent);\n      \n      // Cache document\n      this.documentCache.set(queueItem.metadata.id, documentContent);\n\n      return {\n        success: true,\n        document: documentContent,\n        processingTime: Date.now() - startTime\n      };\n\n    } catch (error) {\n      console.error(`Document processing failed for ${queueItem.metadata.name}:`, error);\n\n      // Retry logic\n      if (queueItem.retryCount < this.RETRY_LIMIT) {\n        const retryItem = {\n          ...queueItem,\n          retryCount: queueItem.retryCount + 1\n        };\n        this.processingQueue.set(queueItem.id, retryItem);\n        return {\n          success: false,\n          error: `Processing failed, retrying (${queueItem.retryCount + 1}/${this.RETRY_LIMIT})`,\n          processingTime: Date.now() - startTime\n        };\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown processing error',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  // =============================================================================\n  // TEXT EXTRACTION & PARSING\n  // =============================================================================\n\n  /**\n   * Extract text content from various file formats\n   */\n  private async extractTextContent(file: File): Promise<string> {\n    const format = file.name.split('.').pop()?.toLowerCase();\n\n    switch (format) {\n      case 'txt':\n      case 'md':\n        return await file.text();\n\n      case 'pdf':\n        return await this.extractPdfText(file);\n\n      case 'docx':\n      case 'doc':\n        return await this.extractDocxText(file);\n\n      case 'pptx':\n      case 'ppt':\n        return await this.extractPptText(file);\n\n      case 'xlsx':\n      case 'xls':\n        return await this.extractExcelText(file);\n\n      default:\n        throw new Error(`Unsupported file format: ${format}`);\n    }\n  }\n\n  /**\n   * Extract text from PDF files\n   */\n  private async extractPdfText(file: File): Promise<string> {\n    try {\n      // Use PDF.js or similar library for PDF parsing\n      // For now, return a placeholder - implement with actual PDF parsing library\n      return `[PDF Content from ${file.name}]`;\n    } catch (error) {\n      throw new Error(`Failed to extract PDF text: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Extract text from DOCX files\n   */\n  private async extractDocxText(file: File): Promise<string> {\n    try {\n      // Use mammoth.js or similar library for DOCX parsing\n      // For now, return a placeholder - implement with actual DOCX parsing library\n      return `[DOCX Content from ${file.name}]`;\n    } catch (error) {\n      throw new Error(`Failed to extract DOCX text: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Extract text from PowerPoint files\n   */\n  private async extractPptText(file: File): Promise<string> {\n    try {\n      return `[PowerPoint Content from ${file.name}]`;\n    } catch (error) {\n      throw new Error(`Failed to extract PowerPoint text: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Extract text from Excel files\n   */\n  private async extractExcelText(file: File): Promise<string> {\n    try {\n      return `[Excel Content from ${file.name}]`;\n    } catch (error) {\n      throw new Error(`Failed to extract Excel text: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // =============================================================================\n  // DOCUMENT RETRIEVAL & SEARCH\n  // =============================================================================\n\n  /**\n   * Find relevant documents based on context and call type\n   */\n  async findRelevantDocuments(\n    context: SuggestionContext,\n    callType: CallType,\n    maxResults: number = 3\n  ): Promise<readonly DocumentSearchResult[]> {\n    const sessionDocuments = await this.getSessionDocuments(context.currentTopic);\n    const callTypeConfig = CALL_TYPE_CONFIGS[callType];\n    \n    const results: DocumentSearchResult[] = [];\n\n    for (const doc of sessionDocuments) {\n      const content = await this.getDocumentContent(doc.id);\n      if (!content) continue;\n\n      const relevanceScore = this.calculateRelevanceScore(\n        content,\n        context,\n        callType,\n        callTypeConfig\n      );\n\n      if (relevanceScore > 0.3) { // Threshold for relevance\n        const matchingChunks = this.findMatchingChunks(content, context.currentTopic);\n        \n        results.push({\n          document: content,\n          relevanceScore,\n          matchingChunks,\n          reason: this.generateRelevanceReason(content, context, callType)\n        });\n      }\n    }\n\n    // Sort by relevance score and return top results\n    return results\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\n      .slice(0, maxResults);\n  }\n\n  /**\n   * Calculate document relevance score based on multiple factors\n   */\n  private calculateRelevanceScore(\n    document: DocumentContent,\n    context: SuggestionContext,\n    callType: CallType,\n    callTypeConfig: any\n  ): number {\n    let score = 0;\n\n    // Document type relevance based on call type\n    const docMetadata = this.getDocumentMetadataFromCache(document.id);\n    if (docMetadata && callTypeConfig.documentRelevance[docMetadata.type]) {\n      const priorityWeight = this.getPriorityWeight(callTypeConfig.documentRelevance[docMetadata.type]);\n      score += priorityWeight * 0.4;\n    }\n\n    // Content similarity to current topic\n    const topicSimilarity = this.calculateTopicSimilarity(document, context.currentTopic);\n    score += topicSimilarity * 0.3;\n\n    // Entity overlap with conversation\n    const entityOverlap = this.calculateEntityOverlap(document, context.conversationHistory);\n    score += entityOverlap * 0.3;\n\n    return Math.min(score, 1.0);\n  }\n\n  // =============================================================================\n  // UTILITY METHODS\n  // =============================================================================\n\n  /**\n   * Detect document type from filename and call context\n   */\n  private detectDocumentType(filename: string, callType: CallType): DocumentType {\n    const lowerName = filename.toLowerCase();\n\n    // Resume/CV detection\n    if (lowerName.includes('resume') || lowerName.includes('cv')) {\n      return DOCUMENT_TYPES.RESUME;\n    }\n\n    // Portfolio detection\n    if (lowerName.includes('portfolio') || lowerName.includes('work')) {\n      return DOCUMENT_TYPES.PORTFOLIO;\n    }\n\n    // Presentation detection\n    if (lowerName.includes('presentation') || lowerName.includes('pitch') || \n        lowerName.includes('deck') || filename.endsWith('.pptx') || filename.endsWith('.ppt')) {\n      return DOCUMENT_TYPES.PRESENTATION;\n    }\n\n    // Proposal detection\n    if (lowerName.includes('proposal') || lowerName.includes('quote')) {\n      return DOCUMENT_TYPES.PROPOSAL;\n    }\n\n    // Case study detection\n    if (lowerName.includes('case') || lowerName.includes('study')) {\n      return DOCUMENT_TYPES.CASE_STUDY;\n    }\n\n    // Pricing detection\n    if (lowerName.includes('price') || lowerName.includes('cost') || lowerName.includes('rate')) {\n      return DOCUMENT_TYPES.PRICING;\n    }\n\n    // Default based on call type\n    switch (callType) {\n      case 'sales_pitch':\n      case 'sales_call':\n        return DOCUMENT_TYPES.PRESENTATION;\n      case 'interview':\n        return DOCUMENT_TYPES.RESUME;\n      default:\n        return DOCUMENT_TYPES.OTHER;\n    }\n  }\n\n  /**\n   * Generate unique document ID\n   */\n  private generateDocumentId(): string {\n    return `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Calculate document checksum for integrity verification\n   */\n  private async calculateChecksum(file: File): Promise<string> {\n    const buffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  // Additional utility methods would be implemented here...\n  \n  /**\n   * Initialize document processing system\n   */\n  private initializeDocumentProcessing(): void {\n    // Set up periodic cleanup of expired cache entries\n    setInterval(() => {\n      this.cleanupExpiredCache();\n    }, 60 * 60 * 1000); // Every hour\n  }\n\n  /**\n   * Get session documents\n   */\n  private async getSessionDocuments(sessionId: string): Promise<readonly DocumentMetadata[]> {\n    // Implementation would retrieve documents for session\n    return [];\n  }\n\n  /**\n   * Store document in secure storage\n   */\n  private async storeDocument(metadata: DocumentMetadata, content: DocumentContent): Promise<void> {\n    await this.storage.setItem(\n      `${StorageNamespaces.DOCUMENTS}:metadata_${metadata.id}`,\n      metadata\n    );\n    \n    await this.storage.setItem(\n      `${StorageNamespaces.DOCUMENTS}:content_${metadata.id}`,\n      content\n    );\n  }\n\n  // Additional methods would be implemented as needed...\n  private createDocumentChunks(text: string): readonly DocumentChunk[] { return []; }\n  private async extractEntities(text: string): Promise<readonly ExtractedEntity[]> { return []; }\n  private async generateSummary(text: string, type: DocumentType): Promise<string> { return ''; }\n  private async extractKeyPoints(text: string, type: DocumentType): Promise<readonly string[]> { return []; }\n  private async parseStructuredData(text: string, type: DocumentType, file: File): Promise<Record<string, any>> { return {}; }\n  private calculateDocumentPriority(type: DocumentType, callType: CallType): PriorityLevel { return PRIORITY_LEVELS.MEDIUM; }\n  private generateTags(filename: string, type: DocumentType): readonly string[] { return []; }\n  private getDocumentMetadataFromCache(id: string): DocumentMetadata | undefined { return undefined; }\n  private getPriorityWeight(priority: PriorityLevel): number { return 0.5; }\n  private calculateTopicSimilarity(document: DocumentContent, topic: string): number { return 0.5; }\n  private calculateEntityOverlap(document: DocumentContent, history: readonly any[]): number { return 0.5; }\n  private findMatchingChunks(document: DocumentContent, topic: string): readonly DocumentChunk[] { return []; }\n  private generateRelevanceReason(document: DocumentContent, context: SuggestionContext, callType: CallType): string { return ''; }\n  private async getDocumentContent(id: string): Promise<DocumentContent | undefined> { return undefined; }\n  private cleanupExpiredCache(): void { /* Implementation */ }\n} ","/**\n * LLMOrchestrator - Advanced Meeting Assistant AI Orchestration\n * Coordinates multi-provider AI responses with context-aware adaptation\n * Implements intelligent response generation based on call type, tone, and documents\n */\n\nimport type {\n  LLMProvider,\n  LLMRequest,\n  LLMResponse,\n  SuggestionContext,\n  ContextualResponse,\n  CallType,\n  ToneType,\n  DocumentContent,\n  MeetingContext,\n  PriorityLevel\n} from '../types/index';\n\nimport { OpenAIProvider } from '../api/openai';\nimport { AnthropicProvider } from '../api/anthropic';\nimport { GeminiProvider } from '../api/gemini';\nimport { SecureStorage, StorageNamespaces } from '../utils/storage';\nimport { ContextManager } from './contextManager';\nimport { DocumentManager } from './documentManager';\nimport {\n  CALL_TYPE_CONFIGS,\n  TONE_CONFIGS,\n  CALL_TYPES,\n  TONE_TYPES,\n  PRIORITY_LEVELS\n} from '../utils/constants';\n\n// =============================================================================\n// ORCHESTRATION INTERFACES\n// =============================================================================\n\ninterface ResponseGeneration {\n  readonly prompt: string;\n  readonly provider: LLMProvider;\n  readonly model: string;\n  readonly parameters: LLMGenerationParams;\n}\n\ninterface LLMGenerationParams {\n  readonly temperature: number;\n  readonly maxTokens: number;\n  readonly presencePenalty: number;\n  readonly frequencyPenalty: number;\n  readonly topP: number;\n  readonly stopSequences: readonly string[];\n}\n\ninterface ProviderPerformance {\n  readonly averageLatency: number;\n  readonly successRate: number;\n  readonly cost: number;\n  readonly lastUsed: Date;\n  readonly modelCapabilities: Record<string, boolean>;\n}\n\ninterface ResponseOptimization {\n  readonly callType: CallType;\n  readonly tone: ToneType;\n  readonly priority: PriorityLevel;\n  readonly audience: string;\n  readonly maxLength: number;\n  readonly includeReferences: boolean;\n}\n\n// =============================================================================\n// LLM ORCHESTRATOR SERVICE\n// =============================================================================\n\nexport class LLMOrchestrator {\n  private readonly providers: Map<string, LLMProvider> = new Map();\n  private readonly contextManager: ContextManager;\n  private readonly documentManager: DocumentManager;\n  private readonly storage: SecureStorage;\n  private readonly providerPerformance: Map<string, ProviderPerformance> = new Map();\n  \n  private readonly PROVIDER_TIMEOUT = 30000; // 30 seconds\n  private readonly MAX_RETRIES = 2;\n  private readonly FALLBACK_CHAIN = ['openai', 'anthropic', 'gemini'];\n\n  constructor() {\n    this.contextManager = new ContextManager();\n    this.documentManager = new DocumentManager();\n    this.storage = new SecureStorage();\n    this.initializeProviders();\n    this.loadProviderPerformance();\n  }\n\n  // =============================================================================\n  // MAIN ORCHESTRATION METHODS\n  // =============================================================================\n\n  /**\n   * Generate contextual response for meeting assistant\n   * Adapts to call type, tone, and available documents\n   */\n  async generateMeetingResponse(\n    input: string,\n    meetingContext: MeetingContext,\n    suggestionContext: SuggestionContext\n  ): Promise<ContextualResponse> {\n    try {\n      // Get relevant documents for context\n      const relevantDocs = await this.documentManager.findRelevantDocuments(\n        suggestionContext,\n        meetingContext.callType,\n        3\n      );\n\n      // Build contextual prompt\n      const contextualPrompt = await this.buildContextualPrompt(\n        input,\n        meetingContext,\n        suggestionContext,\n        relevantDocs.map(r => r.document)\n      );\n\n      // Select optimal provider and parameters\n      const generation = await this.selectOptimalGeneration(\n        contextualPrompt,\n        meetingContext.callType,\n        meetingContext.tone\n      );\n\n      // Generate response with fallback handling\n      const llmResponse = await this.generateWithFallback(generation);\n\n      // Post-process and optimize response\n      const contextualResponse = await this.optimizeResponse(\n        llmResponse,\n        meetingContext,\n        relevantDocs.map(r => r.document)\n      );\n\n      // Update performance metrics\n      await this.updateProviderPerformance(generation.provider.name, true, Date.now());\n\n      return contextualResponse;\n\n    } catch (error) {\n      console.error('Meeting response generation failed:', error);\n      \n      // Return fallback response\n      return this.generateFallbackResponse(\n        input,\n        meetingContext.callType,\n        meetingContext.tone\n      );\n    }\n  }\n\n  /**\n   * Generate suggestions for active conversation\n   * Provides real-time meeting assistance\n   */\n  async generateSuggestions(\n    context: SuggestionContext,\n    callType: CallType,\n    tone: ToneType,\n    maxSuggestions: number = 3\n  ): Promise<readonly ContextualResponse[]> {\n    const suggestions: ContextualResponse[] = [];\n\n    try {\n      // Get conversation analysis\n      const conversationAnalysis = await this.analyzeConversation(context);\n      \n      // Generate different types of suggestions\n      const suggestionTypes = this.determineSuggestionTypes(\n        callType,\n        context.meetingPhase,\n        conversationAnalysis\n      );\n\n      for (const suggestionType of suggestionTypes.slice(0, maxSuggestions)) {\n        const suggestion = await this.generateTypedSuggestion(\n          suggestionType,\n          context,\n          callType,\n          tone\n        );\n        \n        if (suggestion) {\n          suggestions.push(suggestion);\n        }\n      }\n\n      return suggestions;\n\n    } catch (error) {\n      console.error('Suggestion generation failed:', error);\n      return [];\n    }\n  }\n\n  // =============================================================================\n  // CONTEXTUAL PROMPT BUILDING\n  // =============================================================================\n\n  /**\n   * Build sophisticated contextual prompt with meeting awareness\n   */\n  private async buildContextualPrompt(\n    input: string,\n    meetingContext: MeetingContext,\n    suggestionContext: SuggestionContext,\n    relevantDocuments: readonly DocumentContent[]\n  ): Promise<string> {\n    const callTypeConfig = CALL_TYPE_CONFIGS[meetingContext.callType];\n    const toneConfig = TONE_CONFIGS[meetingContext.tone];\n\n    // Build document context\n    const documentContext = relevantDocuments.length > 0 \n      ? this.buildDocumentContext(relevantDocuments, meetingContext.callType)\n      : '';\n\n    // Build conversation context\n    const conversationContext = this.buildConversationContext(\n      suggestionContext.conversationHistory.slice(-10) // Last 10 exchanges\n    );\n\n    // Build meeting-specific instructions\n    const meetingInstructions = this.buildMeetingInstructions(\n      meetingContext,\n      callTypeConfig,\n      toneConfig\n    );\n\n    const prompt = `\n${meetingInstructions}\n\nCURRENT MEETING CONTEXT:\n- Call Type: ${meetingContext.callType}\n- Tone: ${meetingContext.tone}\n- Meeting Phase: ${suggestionContext.meetingPhase}\n- Participants: ${meetingContext.participants.length}\n- Current Topic: ${suggestionContext.currentTopic}\n\n${documentContext}\n\n${conversationContext}\n\nUSER INPUT: \"${input}\"\n\nPlease provide a response that:\n1. Matches the ${meetingContext.tone} tone\n2. Is appropriate for a ${meetingContext.callType}\n3. Considers the current meeting phase (${suggestionContext.meetingPhase})\n4. References relevant information from the provided documents when helpful\n5. Maintains professional standards while being engaging\n\nResponse:`;\n\n    return prompt;\n  }\n\n  /**\n   * Build document context section with intelligent summarization\n   */\n  private buildDocumentContext(\n    documents: readonly DocumentContent[],\n    callType: CallType\n  ): string {\n    if (documents.length === 0) return '';\n\n    let context = '\\nRELEVANT DOCUMENTS:\\n';\n    \n    documents.forEach((doc, index) => {\n      context += `\nDocument ${index + 1}: ${doc.id}\nSummary: ${doc.summary}\nKey Points: ${doc.keyPoints.slice(0, 5).join(', ')}\n`;\n\n      // Include specific structured data based on call type\n      if (callType === CALL_TYPES.INTERVIEW && doc.structuredData.personalInfo) {\n        context += `Background: ${JSON.stringify(doc.structuredData.personalInfo, null, 2)}\\n`;\n      } else if (callType.includes('sales') && doc.structuredData.pricing) {\n        context += `Pricing Info: ${JSON.stringify(doc.structuredData.pricing, null, 2)}\\n`;\n      }\n    });\n\n    return context;\n  }\n\n  /**\n   * Build conversation context with sentiment awareness\n   */\n  private buildConversationContext(\n    conversationHistory: readonly any[]\n  ): string {\n    if (conversationHistory.length === 0) return '';\n\n    let context = '\\nRECENT CONVERSATION:\\n';\n    \n    conversationHistory.forEach((entry, index) => {\n      context += `${entry.speaker}: ${entry.content}\\n`;\n    });\n\n    return context;\n  }\n\n  /**\n   * Build meeting-specific instructions based on call type and tone\n   */\n  private buildMeetingInstructions(\n    meetingContext: MeetingContext,\n    callTypeConfig: any,\n    toneConfig: any\n  ): string {\n    const instructions = `You are an AI meeting assistant specialized in ${meetingContext.callType} scenarios.\n\nCALL TYPE FOCUS (${meetingContext.callType}):\n- Focus Areas: ${callTypeConfig.focusAreas.join(', ')}\n- Response Style: ${callTypeConfig.responseStyle}\n- Priority Level: ${callTypeConfig.priority}\n\nTONE REQUIREMENTS (${meetingContext.tone}):\n- Vocabulary: ${toneConfig.vocabulary}\n- Sentiment: ${toneConfig.sentiment}\n- Structure: ${toneConfig.structure}\n- Key Phrases to Use: ${toneConfig.phrases.join(', ')}`;\n\n    return instructions;\n  }\n\n  // =============================================================================\n  // PROVIDER SELECTION & OPTIMIZATION\n  // =============================================================================\n\n  /**\n   * Select optimal provider and parameters for the request\n   */\n  private async selectOptimalGeneration(\n    prompt: string,\n    callType: CallType,\n    tone: ToneType\n  ): Promise<ResponseGeneration> {\n    // Calculate prompt complexity\n    const promptComplexity = this.calculatePromptComplexity(prompt);\n    \n    // Get provider capabilities and performance\n    const providerScores = await this.scoreProviders(callType, tone, promptComplexity);\n    \n    // Select best provider\n    const bestProvider = this.selectBestProvider(providerScores);\n    \n    // Determine optimal parameters\n    const parameters = this.determineOptimalParameters(callType, tone, promptComplexity);\n    \n    // Select best model for provider\n    const model = this.selectOptimalModel(bestProvider, callType);\n\n    return {\n      prompt,\n      provider: bestProvider,\n      model,\n      parameters\n    };\n  }\n\n  /**\n   * Score providers based on call type, tone, and performance\n   */\n  private async scoreProviders(\n    callType: CallType,\n    tone: ToneType,\n    complexity: number\n  ): Promise<Map<string, number>> {\n    const scores = new Map<string, number>();\n\n    for (const [name, provider] of this.providers) {\n      let score = 0;\n\n      // Base capability score\n      score += this.getProviderCapabilityScore(provider, callType, tone);\n\n      // Performance history score\n      const performance = this.providerPerformance.get(name);\n      if (performance) {\n        score += performance.successRate * 0.3;\n        score += (1 / Math.max(performance.averageLatency, 1)) * 0.2;\n        score += (1 / Math.max(performance.cost, 0.001)) * 0.1;\n      }\n\n      // Complexity handling score\n      score += this.getComplexityScore(provider, complexity);\n\n      scores.set(name, score);\n    }\n\n    return scores;\n  }\n\n  /**\n   * Determine optimal generation parameters based on context\n   */\n  private determineOptimalParameters(\n    callType: CallType,\n    tone: ToneType,\n    complexity: number\n  ): LLMGenerationParams {\n    const baseParams = {\n      temperature: 0.7,\n      maxTokens: 500,\n      presencePenalty: 0.0,\n      frequencyPenalty: 0.0,\n      topP: 0.9,\n      stopSequences: []\n    };\n\n    // Adjust for call type\n    switch (callType) {\n      case CALL_TYPES.INTERVIEW:\n        baseParams.temperature = 0.5; // More conservative\n        baseParams.maxTokens = 300;\n        break;\n      case CALL_TYPES.SALES_PITCH:\n        baseParams.temperature = 0.8; // More creative\n        baseParams.maxTokens = 600;\n        break;\n      case CALL_TYPES.BRAINSTORMING:\n        baseParams.temperature = 0.9; // Most creative\n        baseParams.maxTokens = 400;\n        break;\n    }\n\n    // Adjust for tone\n    switch (tone) {\n      case TONE_TYPES.FORMAL:\n        baseParams.temperature *= 0.8; // More conservative\n        break;\n      case TONE_TYPES.CASUAL:\n        baseParams.temperature *= 1.1; // More flexible\n        break;\n      case TONE_TYPES.CREATIVE:\n        baseParams.temperature *= 1.2; // Most flexible\n        break;\n    }\n\n    // Adjust for complexity\n    if (complexity > 0.7) {\n      baseParams.maxTokens = Math.min(baseParams.maxTokens * 1.5, 1000);\n    }\n\n    return baseParams;\n  }\n\n  // =============================================================================\n  // RESPONSE GENERATION & FALLBACK\n  // =============================================================================\n\n  /**\n   * Generate response with intelligent fallback chain\n   */\n  private async generateWithFallback(\n    generation: ResponseGeneration\n  ): Promise<LLMResponse> {\n    const request: LLMRequest = {\n      prompt: generation.prompt,\n      context: {} as SuggestionContext, // Will be populated properly\n      callType: CALL_TYPES.CLIENT_MEETING, // Default fallback\n      tone: TONE_TYPES.PROFESSIONAL, // Default fallback\n      maxTokens: generation.parameters.maxTokens,\n      temperature: generation.parameters.temperature,\n      presencePenalty: generation.parameters.presencePenalty,\n      frequencyPenalty: generation.parameters.frequencyPenalty,\n      model: generation.model\n    };\n\n    // Try primary provider\n    try {\n      const response = await Promise.race([\n                    generation.provider.generateCompletion(request),\n        this.createTimeoutPromise(this.PROVIDER_TIMEOUT)\n      ]);\n      \n      if (response && response.content) {\n        return response;\n      }\n    } catch (error) {\n      console.warn(`Primary provider ${generation.provider.name} failed:`, error);\n    }\n\n    // Try fallback providers\n    for (const providerName of this.FALLBACK_CHAIN) {\n      if (providerName === generation.provider.name) continue;\n      \n      const fallbackProvider = this.providers.get(providerName);\n      if (!fallbackProvider) continue;\n\n      try {\n        const response = await Promise.race([\n          fallbackProvider.generateCompletion(request),\n          this.createTimeoutPromise(this.PROVIDER_TIMEOUT)\n        ]);\n        \n        if (response && response.content) {\n          console.log(`Fallback provider ${providerName} succeeded`);\n          return response;\n        }\n      } catch (error) {\n        console.warn(`Fallback provider ${providerName} failed:`, error);\n      }\n    }\n\n    throw new Error('All providers failed to generate response');\n  }\n\n  /**\n   * Optimize response based on meeting context\n   */\n  private async optimizeResponse(\n    llmResponse: LLMResponse,\n    meetingContext: MeetingContext,\n    relevantDocuments: readonly DocumentContent[]\n  ): Promise<ContextualResponse> {\n    const content = llmResponse.content || llmResponse.text || '';\n    \n    // Extract supporting points from documents\n    const supportingPoints = this.extractSupportingPoints(content, relevantDocuments);\n    \n    // Generate follow-up questions based on call type\n    const followUpQuestions = this.generateFollowUpQuestions(\n      content,\n      meetingContext.callType,\n      meetingContext.tone\n    );\n\n    return {\n      content,\n      tone: meetingContext.tone,\n      confidence: this.calculateResponseConfidence(llmResponse),\n      relevantDocuments: relevantDocuments.map(doc => doc.id),\n      supportingPoints,\n      followUpQuestions,\n      metadata: {\n        callType: meetingContext.callType,\n        responseType: 'answer',\n        priority: PRIORITY_LEVELS.HIGH,\n        timing: 'immediate',\n        formality: this.mapToneToFormality(meetingContext.tone),\n        length: content.length > 200 ? 'detailed' : 'brief'\n      }\n    };\n  }\n\n  // =============================================================================\n  // INITIALIZATION & UTILITY METHODS\n  // =============================================================================\n\n  /**\n   * Initialize AI providers with enterprise configuration\n   */\n  private initializeProviders(): void {\n    try {\n      // Note: Providers will be initialized with actual API keys when needed\n      // For now, initialize with dummy keys to prevent errors\n      this.providers.set('openai', new OpenAIProvider('dummy-key'));\n      this.providers.set('anthropic', new AnthropicProvider('dummy-key'));\n      this.providers.set('gemini', new GeminiProvider('dummy-key'));\n      \n      console.log(`Initialized ${this.providers.size} AI providers`);\n    } catch (error) {\n      console.error('Failed to initialize providers:', error);\n    }\n  }\n\n  /**\n   * Load provider performance history\n   */\n  private async loadProviderPerformance(): Promise<void> {\n    try {\n      const performanceData = await this.storage.getItem(\n        `${StorageNamespaces.PERFORMANCE}:provider_performance`\n      );\n      \n      if (performanceData) {\n        Object.entries(performanceData).forEach(([name, data]) => {\n          this.providerPerformance.set(name, data as ProviderPerformance);\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load provider performance:', error);\n    }\n  }\n\n  // Additional utility methods (simplified for brevity)\n  private calculatePromptComplexity(prompt: string): number { return 0.5; }\n  private getProviderCapabilityScore(provider: LLMProvider, callType: CallType, tone: ToneType): number { return 0.7; }\n  private getComplexityScore(provider: LLMProvider, complexity: number): number { return 0.6; }\n  private selectBestProvider(scores: Map<string, number>): LLMProvider {\n    const bestName = Array.from(scores.entries()).reduce((a, b) => a[1] > b[1] ? a : b)[0];\n    return this.providers.get(bestName) || this.providers.values().next().value;\n  }\n  private selectOptimalModel(provider: LLMProvider, callType: CallType): string {\n    const models = provider.getModels?.() || [];\n    return models[0] || 'default';\n  }\n  private createTimeoutPromise(timeout: number): Promise<never> {\n    return new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeout));\n  }\n  private calculateResponseConfidence(response: LLMResponse): number { return 0.8; }\n  private extractSupportingPoints(content: string, docs: readonly DocumentContent[]): readonly string[] { return []; }\n  private generateFollowUpQuestions(content: string, callType: CallType, tone: ToneType): readonly string[] { return []; }\n  private mapToneToFormality(tone: ToneType): 'formal' | 'casual' | 'neutral' { return 'formal'; }\n  private async updateProviderPerformance(name: string, success: boolean, latency: number): Promise<void> { }\n  private generateFallbackResponse(input: string, callType: CallType, tone: ToneType): ContextualResponse {\n    return {\n      content: \"I'm processing your request. Please give me a moment.\",\n      tone,\n      confidence: 0.5,\n      relevantDocuments: [],\n      supportingPoints: [],\n      followUpQuestions: [],\n      metadata: {\n        callType,\n        responseType: 'answer',\n        priority: PRIORITY_LEVELS.MEDIUM,\n        timing: 'immediate',\n        formality: 'formal',\n        length: 'brief'\n      }\n    };\n  }\n  private async analyzeConversation(context: SuggestionContext): Promise<any> { return {}; }\n  private determineSuggestionTypes(callType: CallType, phase: string, analysis: any): readonly string[] { return []; }\n  private async generateTypedSuggestion(type: string, context: SuggestionContext, callType: CallType, tone: ToneType): Promise<ContextualResponse | undefined> { return undefined; }\n} ","/**\n * PerformanceAnalyzer - Interview performance tracking and analysis\n * Implements comprehensive metrics calculation and coaching\n * Provides data-driven insights for interview improvement\n */\n\nimport type {\n  PerformanceMeasurement,\n  PerformanceEvent,\n  PerformanceReport,\n  TranscriptionData,\n  SuggestionEntry,\n  SessionMetadata,\n} from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface MetricsConfig {\n  speechMetrics: {\n    fillerWords: string[];\n    pacingThresholds: {\n      slow: number;\n      optimal: number;\n      fast: number;\n    };\n  };\n  responseMetrics: {\n    optimalLength: {\n      min: number;\n      max: number;\n    };\n    starMethodKeywords: string[];\n  };\n  engagementMetrics: {\n    questionResponseTime: number;\n    followUpIndicators: string[];\n  };\n}\n\nexport interface InterviewTranscription extends TranscriptionData {\n  timestamp: number;\n  text: string;\n  confidence?: number;\n  isQuestion?: boolean;\n  speaker?: string;\n}\n\nexport interface InterviewQuestion {\n  text: string;\n  timestamp: number;\n  type: QuestionType;\n}\n\nexport interface InterviewSuggestion extends SuggestionEntry {\n  wasUsed: boolean;\n}\n\nexport interface InterviewMetrics {\n  speech: SpeechMetrics;\n  content: ContentMetrics;\n  engagement: EngagementMetrics;\n  technical: TechnicalMetrics;\n  timing: TimingMetrics;\n}\n\nexport interface SpeechMetrics {\n  fillerCount: number;\n  fillerRate: number;\n  fillerUsage: Map<string, number>;\n  averagePace: number;\n  paceRating: string;\n  clarity: number;\n  confidence: number;\n}\n\nexport interface ContentMetrics {\n  starMethodUsage: number;\n  responseQuality: number;\n  relevance: number;\n  specificity: number;\n  examples: number;\n}\n\nexport interface EngagementMetrics {\n  averageResponseTime: number;\n  hesitationCount: number;\n  followUpQuestions: number;\n  activeListening: number;\n}\n\nexport interface TechnicalMetrics {\n  accuracy: number;\n  depth: number;\n  terminology: number;\n  problemSolving: number;\n}\n\nexport interface TimingMetrics {\n  totalDuration: number;\n  questionTime: number;\n  responseTime: number;\n  silenceTime: number;\n  balance: number;\n  averageResponseTime?: number;\n}\n\nexport interface InterviewInsight {\n  type: 'strength' | 'weakness' | 'improvement' | 'suggestion';\n  category: string;\n  title: string;\n  description: string;\n  score: number;\n  priority: 'low' | 'medium' | 'high';\n  actionable: boolean;\n  examples?: string[];\n}\n\nexport interface Interview {\n  id: string;\n  startTime: number;\n  endTime: number | null;\n  duration?: number;\n  metadata: SessionMetadata;\n  transcription: InterviewTranscription[];\n  questions: InterviewQuestion[];\n  responses: any[];\n  suggestions: InterviewSuggestion[];\n  metrics: InterviewMetrics | null;\n  score: number | null;\n  insights: InterviewInsight[] | null;\n}\n\nexport interface AggregateStats {\n  totalInterviews: number;\n  averageScore: number;\n  improvementTrend: number[];\n  commonWeaknesses: Map<string, number>;\n  strongAreas: Map<string, number>;\n}\n\nexport interface PerformanceAnalyzerConfig {\n  enableRemoteLogging: boolean;\n  remoteLoggingEndpoint: string;\n  sampleRate: number;\n}\n\nexport type QuestionType =\n  | 'behavioral'\n  | 'technical'\n  | 'situational'\n  | 'cultural'\n  | 'personal'\n  | 'other';\n\n// =============================================================================\n// PERFORMANCE ANALYZER CLASS\n// =============================================================================\n\n/**\n * PerformanceAnalyzer - Analyzes interview performance metrics\n * Implements statistical analysis and trend detection\n */\nexport class PerformanceAnalyzer {\n  private readonly metricsConfig: MetricsConfig;\n  private readonly interviews: Map<string, Interview>;\n  private readonly aggregateStats: AggregateStats;\n  private readonly measurements: Map<string, PerformanceMeasurement>;\n  private readonly completedMeasurements: Map<string, PerformanceMeasurement>;\n  private readonly eventLog: PerformanceEvent[];\n  private readonly errorLog: any[];\n  private readonly config: PerformanceAnalyzerConfig;\n\n  constructor() {\n    // Performance metrics configuration\n    this.metricsConfig = {\n      speechMetrics: {\n        fillerWords: ['um', 'uh', 'like', 'you know', 'basically', 'actually', 'literally'],\n        pacingThresholds: {\n          slow: 120, // words per minute\n          optimal: 150,\n          fast: 180,\n        },\n      },\n      responseMetrics: {\n        optimalLength: {\n          min: 30, // seconds\n          max: 120,\n        },\n        starMethodKeywords: ['situation', 'task', 'action', 'result'],\n      },\n      engagementMetrics: {\n        questionResponseTime: 5000, // ms before considered hesitation\n        followUpIndicators: ['elaborate', 'example', 'specifically', 'detail'],\n      },\n    };\n\n    // Interview data storage\n    this.interviews = new Map();\n\n    // Aggregate statistics\n    this.aggregateStats = {\n      totalInterviews: 0,\n      averageScore: 0,\n      improvementTrend: [],\n      commonWeaknesses: new Map(),\n      strongAreas: new Map(),\n    };\n\n    // Performance monitoring\n    this.measurements = new Map();\n    this.completedMeasurements = new Map();\n    this.eventLog = [];\n    this.errorLog = [];\n\n    this.config = {\n      enableRemoteLogging: false,\n      remoteLoggingEndpoint: '',\n      sampleRate: 1.0, // Log all events by default\n    };\n\n    // Load persisted data\n    this.loadPersistedData();\n  }\n\n  /**\n   * Record new interview session\n   * Initializes interview tracking\n   */\n  startInterview(metadata: SessionMetadata, id?: string): string {\n    const interviewId = id || crypto.randomUUID();\n\n    const interview: Interview = {\n      id: interviewId,\n      startTime: Date.now(),\n      endTime: null,\n      metadata: {\n        company: metadata.company || 'Unknown',\n        position: metadata.position || 'Unknown',\n        platform: metadata.platform || 'Unknown',\n        ...metadata,\n      },\n      transcription: [],\n      questions: [],\n      responses: [],\n      suggestions: [],\n      metrics: null,\n      score: null,\n      insights: null,\n    };\n\n    this.interviews.set(interviewId, interview);\n\n    return interviewId;\n  }\n\n  /**\n   * Add transcription entry to interview\n   * Processes speech data for analysis\n   */\n  addTranscription(interviewId: string, entry: TranscriptionData): void {\n    const interview = this.interviews.get(interviewId);\n    if (!interview) {\n      return;\n    }\n\n    const transcriptionEntry: InterviewTranscription = {\n      ...entry,\n      timestamp: Date.now(),\n    };\n\n    interview.transcription.push(transcriptionEntry);\n\n    // Detect questions\n    if (entry.isQuestion) {\n      interview.questions.push({\n        text: entry.text,\n        timestamp: entry.timestamp || Date.now(),\n        type: this.categorizeQuestion(entry.text),\n      });\n    }\n  }\n\n  /**\n   * Record AI suggestion provided\n   */\n  addSuggestion(interviewId: string, suggestion: SuggestionEntry): void {\n    const interview = this.interviews.get(interviewId);\n    if (!interview) {\n      return;\n    }\n\n    const interviewSuggestion: InterviewSuggestion = {\n      ...suggestion,\n      timestamp: Date.now(),\n      wasUsed: false, // Track if user incorporated suggestion\n    };\n\n    interview.suggestions.push(interviewSuggestion);\n  }\n\n  /**\n   * Complete interview and calculate metrics\n   * Performs comprehensive analysis\n   */\n  async completeInterview(interviewId: string): Promise<PerformanceReport | null> {\n    const interview = this.interviews.get(interviewId);\n    if (!interview) {\n      return null;\n    }\n\n    interview.endTime = Date.now();\n    interview.duration = interview.endTime - interview.startTime;\n\n    // Calculate comprehensive metrics\n    interview.metrics = await this.calculateMetrics(interview);\n    interview.score = this.calculateOverallScore(interview.metrics);\n    interview.insights = this.generateInsights(interview);\n\n    // Update aggregate statistics\n    this.updateAggregateStats(interview);\n\n    // Persist data\n    await this.persistInterview(interview);\n\n    return {\n      sessionId: interviewId,\n      startTime: interview.startTime,\n      endTime: interview.endTime,\n      totalDuration: interview.duration,\n      measurements: Array.from(this.completedMeasurements.values()),\n      events: this.eventLog,\n      transcriptionCount: interview.transcription.length,\n      suggestionCount: interview.suggestions.length,\n      averageResponseTime: interview.metrics?.timing.averageResponseTime || 0,\n      errorCount: this.errorLog.length,\n      errors: this.errorLog,\n      summary: {\n        accuracy: interview.metrics?.technical.accuracy,\n        efficiency: interview.score || 0,\n        userSatisfaction: interview.metrics?.engagement.activeListening,\n      },\n    };\n  }\n\n  /**\n   * Calculate comprehensive performance metrics\n   * Implements multi-dimensional analysis\n   */\n  private async calculateMetrics(interview: Interview): Promise<InterviewMetrics> {\n    const metrics: InterviewMetrics = {\n      speech: this.analyzeSpeechPatterns(interview),\n      content: this.analyzeResponseContent(interview),\n      engagement: this.analyzeEngagement(interview),\n      technical: this.analyzeTechnicalAccuracy(interview),\n      timing: this.analyzeTimingMetrics(interview),\n    };\n\n    return metrics;\n  }\n\n  /**\n   * Analyze speech patterns and delivery\n   */\n  private analyzeSpeechPatterns(interview: Interview): SpeechMetrics {\n    const userTranscriptions = interview.transcription.filter((t) => !t.isQuestion);\n    const totalWords = userTranscriptions.reduce((sum, t) => sum + t.text.split(' ').length, 0);\n\n    // Count filler words\n    let fillerCount = 0;\n    const fillerUsage = new Map<string, number>();\n\n    userTranscriptions.forEach((entry) => {\n      const words = entry.text.toLowerCase().split(/\\s+/);\n      words.forEach((word) => {\n        if (this.metricsConfig.speechMetrics.fillerWords.includes(word)) {\n          fillerCount++;\n          fillerUsage.set(word, (fillerUsage.get(word) || 0) + 1);\n        }\n      });\n    });\n\n    const fillerRate = totalWords > 0 ? (fillerCount / totalWords) * 100 : 0;\n\n    // Calculate average pace (words per minute)\n    const speakingTime = userTranscriptions.reduce(\n      (sum, entry) => sum + (entry.timestamp || 0),\n      0\n    );\n    const averagePace = speakingTime > 0 ? (totalWords / speakingTime) * 60000 : 0;\n\n    return {\n      fillerCount,\n      fillerRate,\n      fillerUsage,\n      averagePace,\n      paceRating: this.ratePace(averagePace),\n      clarity: Math.max(0, 100 - fillerRate * 2), // Simple clarity calculation\n      confidence: this.calculateConfidenceScore(userTranscriptions),\n    };\n  }\n\n  /**\n   * Analyze response content quality\n   */\n  private analyzeResponseContent(interview: Interview): ContentMetrics {\n    const userResponses = interview.transcription.filter((t) => !t.isQuestion);\n    const totalText = userResponses.map((r) => r.text).join(' ').toLowerCase();\n\n    // Check for STAR method usage\n    const starMethodUsage = this.metricsConfig.responseMetrics.starMethodKeywords.reduce(\n      (count, keyword) => count + (totalText.includes(keyword) ? 1 : 0),\n      0\n    );\n\n    // Analyze examples usage\n    const exampleIndicators = ['for example', 'for instance', 'such as', 'like when'];\n    const examples = exampleIndicators.reduce(\n      (count, indicator) => count + (totalText.includes(indicator) ? 1 : 0),\n      0\n    );\n\n    return {\n      starMethodUsage: (starMethodUsage / this.metricsConfig.responseMetrics.starMethodKeywords.length) * 100,\n      responseQuality: this.calculateResponseQuality(userResponses),\n      relevance: this.calculateRelevance(interview),\n      specificity: this.calculateSpecificity(userResponses),\n      examples,\n    };\n  }\n\n  /**\n   * Analyze engagement metrics\n   */\n  private analyzeEngagement(interview: Interview): EngagementMetrics {\n    const responses = interview.transcription.filter((t) => !t.isQuestion);\n    const questions = interview.questions;\n\n    // Calculate average response time\n    let totalResponseTime = 0;\n    let hesitationCount = 0;\n\n    for (let i = 0; i < questions.length && i < responses.length; i++) {\n      const response = responses[i];\n      const question = questions[i];\n      \n      if (response && question) {\n        const responseTime = response.timestamp - question.timestamp;\n        totalResponseTime += responseTime;\n\n        if (responseTime > this.metricsConfig.engagementMetrics.questionResponseTime) {\n          hesitationCount++;\n        }\n      }\n    }\n\n    const averageResponseTime = questions.length > 0 ? totalResponseTime / questions.length : 0;\n\n    return {\n      averageResponseTime,\n      hesitationCount,\n      followUpQuestions: this.countFollowUpQuestions(interview),\n      activeListening: this.calculateActiveListening(interview),\n    };\n  }\n\n  /**\n   * Analyze technical accuracy\n   */\n  private analyzeTechnicalAccuracy(interview: Interview): TechnicalMetrics {\n    // This is a simplified implementation\n    // In a real application, you might use NLP to analyze technical content\n    return {\n      accuracy: 75, // Placeholder - would need sophisticated analysis\n      depth: 70,\n      terminology: 80,\n      problemSolving: 65,\n    };\n  }\n\n  /**\n   * Analyze timing metrics\n   */\n  private analyzeTimingMetrics(interview: Interview): TimingMetrics {\n    const totalDuration = interview.duration || 0;\n    const questionTime = interview.questions.reduce((sum, q) => sum + 5000, 0); // Assume 5s per question\n    const responseTime = totalDuration - questionTime;\n\n    return {\n      totalDuration,\n      questionTime,\n      responseTime,\n      silenceTime: 0, // Would need audio analysis\n      balance: responseTime > 0 ? (questionTime / responseTime) * 100 : 0,\n      averageResponseTime: responseTime > 0 ? (questionTime / responseTime) * 100 : 0,\n    };\n  }\n\n  /**\n   * Calculate overall performance score\n   */\n  private calculateOverallScore(metrics: InterviewMetrics): number {\n    const weights = {\n      speech: 0.25,\n      content: 0.35,\n      engagement: 0.25,\n      technical: 0.15,\n    };\n\n    const speechScore = (metrics.speech.clarity + (100 - metrics.speech.fillerRate)) / 2;\n    const contentScore = (metrics.content.responseQuality + metrics.content.starMethodUsage) / 2;\n    const engagementScore = Math.max(0, 100 - metrics.engagement.hesitationCount * 10);\n    const technicalScore = (\n      metrics.technical.accuracy +\n      metrics.technical.depth +\n      metrics.technical.terminology\n    ) / 3;\n\n    return (\n      speechScore * weights.speech +\n      contentScore * weights.content +\n      engagementScore * weights.engagement +\n      technicalScore * weights.technical\n    );\n  }\n\n  /**\n   * Generate actionable insights\n   */\n  private generateInsights(interview: Interview): InterviewInsight[] {\n    const insights: InterviewInsight[] = [];\n    const metrics = interview.metrics;\n\n    if (!metrics) return insights;\n\n    // Filler words insight\n    if (metrics.speech.fillerRate > 5) {\n      insights.push({\n        type: 'weakness',\n        category: 'speech',\n        title: 'Excessive Filler Words',\n        description: `You used ${metrics.speech.fillerCount} filler words (${metrics.speech.fillerRate.toFixed(1)}% of total words). Try to pause instead of using fillers.`,\n        score: 100 - metrics.speech.fillerRate,\n        priority: 'high',\n        actionable: true,\n        examples: Array.from(metrics.speech.fillerUsage.keys()).slice(0, 3),\n      });\n    }\n\n    // STAR method insight\n    if (metrics.content.starMethodUsage < 50) {\n      insights.push({\n        type: 'improvement',\n        category: 'content',\n        title: 'STAR Method Usage',\n        description: 'Consider using the STAR method (Situation, Task, Action, Result) to structure your behavioral responses.',\n        score: metrics.content.starMethodUsage,\n        priority: 'medium',\n        actionable: true,\n      });\n    }\n\n    // Response time insight\n    if (metrics.engagement.hesitationCount > 2) {\n      insights.push({\n        type: 'weakness',\n        category: 'engagement',\n        title: 'Response Hesitation',\n        description: `You hesitated before responding ${metrics.engagement.hesitationCount} times. Practice common interview questions to improve response speed.`,\n        score: Math.max(0, 100 - metrics.engagement.hesitationCount * 20),\n        priority: 'medium',\n        actionable: true,\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Generate comprehensive performance report\n   */\n  private generateReport(interview: Interview): any {\n    return {\n      summary: {\n        overallScore: interview.score,\n        duration: this.formatDuration(interview.duration || 0),\n        questionsAnswered: interview.questions.length,\n        suggestionsProvided: interview.suggestions.length,\n      },\n      metrics: interview.metrics,\n      insights: interview.insights,\n      recommendations: this.generateRecommendations(interview),\n    };\n  }\n\n  /**\n   * Generate recommendations based on performance\n   */\n  private generateRecommendations(interview: Interview): string[] {\n    const recommendations: string[] = [];\n    const metrics = interview.metrics;\n\n    if (!metrics) return recommendations;\n\n    if (metrics.speech.fillerRate > 3) {\n      recommendations.push('Practice speaking more slowly and pause instead of using filler words');\n    }\n\n    if (metrics.content.starMethodUsage < 75) {\n      recommendations.push('Structure behavioral responses using the STAR method');\n    }\n\n    if (metrics.engagement.averageResponseTime > 8000) {\n      recommendations.push('Practice common interview questions to reduce response time');\n    }\n\n    return recommendations;\n  }\n\n  // =============================================================================\n  // HELPER METHODS\n  // =============================================================================\n\n  private categorizeQuestion(text: string): QuestionType {\n    const lowerText = text.toLowerCase();\n\n    if (lowerText.includes('tell me about') || lowerText.includes('describe a time')) {\n      return 'behavioral';\n    }\n    if (lowerText.includes('how would you') || lowerText.includes('what would you do')) {\n      return 'situational';\n    }\n    if (lowerText.includes('culture') || lowerText.includes('team') || lowerText.includes('values')) {\n      return 'cultural';\n    }\n    if (lowerText.includes('technical') || lowerText.includes('code') || lowerText.includes('algorithm')) {\n      return 'technical';\n    }\n\n    return 'other';\n  }\n\n  private ratePace(wpm: number): string {\n    const thresholds = this.metricsConfig.speechMetrics.pacingThresholds;\n    if (wpm < thresholds.slow) return 'slow';\n    if (wpm > thresholds.fast) return 'fast';\n    return 'optimal';\n  }\n\n  private calculateConfidenceScore(transcriptions: InterviewTranscription[]): number {\n    // Simple confidence calculation based on avg confidence and response length\n    const avgConfidence = transcriptions.reduce((sum, t) => sum + (t.confidence || 0), 0) / transcriptions.length;\n    const avgLength = transcriptions.reduce((sum, t) => sum + t.text.length, 0) / transcriptions.length;\n    \n    // Combine confidence and length factors\n    return Math.min(100, avgConfidence * 100 + (avgLength / 50));\n  }\n\n  private calculateResponseQuality(responses: InterviewTranscription[]): number {\n    // Placeholder implementation\n    const avgLength = responses.reduce((sum, r) => sum + r.text.length, 0) / responses.length;\n    return Math.min(100, (avgLength / 100) * 100);\n  }\n\n  private calculateRelevance(interview: Interview): number {\n    // Placeholder implementation\n    return 80;\n  }\n\n  private calculateSpecificity(responses: InterviewTranscription[]): number {\n    // Look for specific details, numbers, proper nouns\n    const totalText = responses.map(r => r.text).join(' ');\n    const specificIndicators = /\\b\\d+\\b|[A-Z][a-z]+\\s[A-Z][a-z]+|\\$\\d+|%/g;\n    const matches = totalText.match(specificIndicators) || [];\n    return Math.min(100, (matches.length / responses.length) * 20);\n  }\n\n  private countFollowUpQuestions(interview: Interview): number {\n    const questionTexts = interview.questions.map(q => q.text.toLowerCase());\n    return questionTexts.filter(text => \n      this.metricsConfig.engagementMetrics.followUpIndicators.some(indicator => text.includes(indicator))\n    ).length;\n  }\n\n  private calculateActiveListening(interview: Interview): number {\n    // Placeholder - would analyze if responses reference previous questions\n    return 75;\n  }\n\n  private updateAggregateStats(interview: Interview): void {\n    this.aggregateStats.totalInterviews++;\n    \n    if (interview.score !== null) {\n      const newAverage = (\n        (this.aggregateStats.averageScore * (this.aggregateStats.totalInterviews - 1)) +\n        interview.score\n      ) / this.aggregateStats.totalInterviews;\n      \n      this.aggregateStats.averageScore = newAverage;\n      this.aggregateStats.improvementTrend.push(interview.score);\n    }\n  }\n\n  private formatDuration(ms: number): string {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor((ms % 60000) / 1000);\n    return `${minutes}m ${seconds}s`;\n  }\n\n  private async persistInterview(interview: Interview): Promise<void> {\n    try {\n      const data = await chrome.storage.local.get('interview_history');\n      const history = data.interview_history || [];\n      \n      history.push({\n        id: interview.id,\n        date: new Date(interview.startTime).toISOString(),\n        score: interview.score,\n        insights: interview.insights?.length || 0,\n        company: interview.metadata.company,\n        position: interview.metadata.position,\n      });\n\n      await chrome.storage.local.set({ interview_history: history });\n    } catch (error) {\n      console.error('Failed to persist interview:', error);\n    }\n  }\n\n  private async loadPersistedData(): Promise<void> {\n    try {\n      const data = await chrome.storage.local.get(['interview_history', 'aggregate_stats']);\n      \n      if (data.aggregate_stats) {\n        Object.assign(this.aggregateStats, data.aggregate_stats);\n      }\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  // =============================================================================\n  // PERFORMANCE MONITORING METHODS\n  // =============================================================================\n\n  startMeasurement(id: string): void {\n    const measurement: PerformanceMeasurement = {\n      name: id,\n      startTime: performance.now(),\n    };\n    this.measurements.set(id, measurement);\n  }\n\n  endMeasurement(id: string): PerformanceMeasurement | null {\n    const measurement = this.measurements.get(id);\n    if (!measurement) {\n      return null;\n    }\n\n    const endTime = performance.now();\n    const completedMeasurement: PerformanceMeasurement = {\n      ...measurement,\n      endTime,\n      duration: endTime - measurement.startTime\n    };\n\n    this.measurements.delete(id);\n    this.completedMeasurements.set(id, completedMeasurement);\n\n    return completedMeasurement;\n  }\n\n  getMeasurement(id: string): PerformanceMeasurement | null {\n    return this.completedMeasurements.get(id) || null;\n  }\n\n  isMeasuring(id: string): boolean {\n    return this.measurements.has(id);\n  }\n\n  logEvent(eventName: string, details: Record<string, any> = {}): void {\n    if (Math.random() > this.config.sampleRate) {\n      return; // Skip this event based on sampling rate\n    }\n\n    const event: PerformanceEvent = {\n      type: eventName,\n      timestamp: Date.now(),\n      data: details,\n    };\n\n    this.eventLog.push(event);\n\n    // Keep log size manageable\n    if (this.eventLog.length > 1000) {\n      this.eventLog.splice(0, 100);\n    }\n  }\n\n  logError(errorName: string, error: Error, context: Record<string, any> = {}): void {\n    const errorEntry = {\n      name: errorName,\n      message: error.message,\n      stack: error.stack,\n      timestamp: Date.now(),\n      context,\n    };\n\n    this.errorLog.push(errorEntry);\n\n    // Keep error log size manageable\n    if (this.errorLog.length > 100) {\n      this.errorLog.splice(0, 10);\n    }\n  }\n\n  getEventLog(): readonly PerformanceEvent[] {\n    return [...this.eventLog];\n  }\n\n  getErrorLog(): readonly any[] {\n    return [...this.errorLog];\n  }\n\n  clearLogs(): void {\n    this.eventLog.length = 0;\n    this.errorLog.length = 0;\n    this.completedMeasurements.clear();\n  }\n} ","/**\n * ResumeParser - Advanced resume parsing service\n * Implements multi-format document parsing with NLP\n * Extracts structured data from PDF and DOCX formats\n */\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface PersonalInfo {\n  name?: string;\n  email?: string;\n  phone?: string;\n  location?: string;\n  linkedin?: string;\n  github?: string;\n  website?: string;\n}\n\nexport interface ExperienceEntry {\n  company: string;\n  position: string;\n  duration: string;\n  description: string[];\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n}\n\nexport interface EducationEntry {\n  institution: string;\n  degree: string;\n  field?: string;\n  graduationDate?: string;\n  gpa?: string;\n  achievements?: string[];\n}\n\nexport interface ProjectEntry {\n  name: string;\n  description: string;\n  technologies?: string[];\n  link?: string;\n}\n\nexport interface StructuredResumeData {\n  personalInfo: PersonalInfo;\n  experience: ExperienceEntry[];\n  education: EducationEntry[];\n  skills: string[];\n  projects: ProjectEntry[];\n  certifications: string[];\n  summary: string;\n}\n\nexport interface ParsedResume {\n  raw: string;\n  structured: StructuredResumeData;\n  metadata: {\n    fileName: string;\n    fileSize: number;\n    parsedAt: number;\n  };\n}\n\ninterface SkillCategories {\n  programming: string[];\n  databases: string[];\n  cloud: string[];\n  tools: string[];\n  soft: string[];\n}\n\ninterface SectionPatterns {\n  experience: RegExp;\n  education: RegExp;\n  skills: RegExp;\n  projects: RegExp;\n  certifications: RegExp;\n  summary: RegExp;\n  contact: RegExp;\n}\n\n// =============================================================================\n// RESUME PARSER CLASS\n// =============================================================================\n\n/**\n * ResumeParser - Extracts structured information from resumes\n * Supports PDF and DOCX formats with intelligent section detection\n */\nexport class ResumeParser {\n  private readonly sectionPatterns: SectionPatterns;\n  private readonly skillCategories: SkillCategories;\n\n  constructor() {\n    // Section patterns for intelligent extraction\n    this.sectionPatterns = {\n      experience:\n        /^(work\\s*experience|professional\\s*experience|employment|experience|work\\s*history)/i,\n      education: /^(education|academic|qualification|degree)/i,\n      skills: /^(skills|technical\\s*skills|core\\s*competencies|expertise)/i,\n      projects: /^(projects|portfolio|key\\s*projects)/i,\n      certifications: /^(certifications|certificates|licenses)/i,\n      summary: /^(summary|objective|profile|about)/i,\n      contact: /^(contact|personal\\s*information)/i,\n    };\n\n    // Skill categories for classification\n    this.skillCategories = {\n      programming: ['python', 'java', 'javascript', 'typescript', 'c++', 'react', 'angular', 'vue'],\n      databases: ['sql', 'mysql', 'postgresql', 'mongodb', 'redis', 'elasticsearch'],\n      cloud: ['aws', 'azure', 'gcp', 'docker', 'kubernetes', 'terraform'],\n      tools: ['git', 'jenkins', 'jira', 'confluence', 'slack', 'figma'],\n      soft: ['leadership', 'communication', 'teamwork', 'problem-solving', 'analytical'],\n    };\n  }\n\n  /**\n   * Parse resume file based on type\n   * Implements format detection and routing\n   */\n  async parseFile(file: File): Promise<ParsedResume> {\n    const fileType = file.type;\n    let textContent = '';\n\n    try {\n      if (fileType === 'application/pdf') {\n        textContent = await this.parsePDF(file);\n      } else if (\n        fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ) {\n        textContent = await this.parseDOCX(file);\n      } else {\n        throw new Error('Unsupported file format');\n      }\n\n      // Extract structured data from text\n      const structuredData = this.extractStructuredData(textContent);\n\n      return {\n        raw: textContent,\n        structured: structuredData,\n        metadata: {\n          fileName: file.name,\n          fileSize: file.size,\n          parsedAt: Date.now(),\n        },\n      };\n    } catch (error) {\n      console.error('Resume parsing failed:', error);\n      throw new Error(`Failed to parse resume: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Parse PDF file using PDF.js\n   * Implements text extraction from PDF\n   */\n  private async parsePDF(file: File): Promise<string> {\n    // Note: In production, you would use PDF.js library\n    // This is a simplified implementation\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = async (_e) => {\n        try {\n          // In real implementation, use PDF.js to extract text\n          // For now, return placeholder\n          const text = 'PDF parsing would extract text here using PDF.js library';\n          resolve(text);\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      reader.onerror = () => reject(new Error('Failed to read PDF file'));\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Parse DOCX file\n   * Implements text extraction from Word documents\n   */\n  private async parseDOCX(file: File): Promise<string> {\n    // Note: In production, you would use mammoth.js or similar\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = async (_e) => {\n        try {\n          // In real implementation, use mammoth.js to extract text\n          const text = 'DOCX parsing would extract text here using mammoth.js library';\n          resolve(text);\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      reader.onerror = () => reject(new Error('Failed to read DOCX file'));\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Extract structured data from resume text\n   * Implements intelligent section detection and parsing\n   */\n  private extractStructuredData(text: string): StructuredResumeData {\n    const lines = text\n      .split('\\n')\n      .map((line) => line.trim())\n      .filter((line) => line);\n    \n    const structured: StructuredResumeData = {\n      personalInfo: {},\n      experience: [],\n      education: [],\n      skills: [],\n      projects: [],\n      certifications: [],\n      summary: '',\n    };\n\n    let currentSection: string | null = null;\n    let currentContent: string[] = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (!line) continue; // Safety check for undefined lines\n      \n      const nextLine = lines[i + 1] || '';\n\n      // Check if line is a section header\n      const detectedSection = this.detectSection(line, nextLine);\n\n      if (detectedSection) {\n        // Process previous section content\n        if (currentSection && currentContent.length > 0) {\n          this.processSection(currentSection, currentContent, structured);\n        }\n\n        currentSection = detectedSection;\n        currentContent = [];\n      } else if (currentSection) {\n        currentContent.push(line);\n      } else {\n        // Before any section, likely personal info\n        this.extractPersonalInfo(line, structured.personalInfo);\n      }\n    }\n\n    // Process final section\n    if (currentSection && currentContent.length > 0) {\n      this.processSection(currentSection, currentContent, structured);\n    }\n\n    // Post-process and enhance data\n    this.enhanceStructuredData(structured);\n\n    return structured;\n  }\n\n  /**\n   * Detect section headers in resume text\n   * Implements pattern matching for section identification\n   */\n  private detectSection(line: string, nextLine: string): string | null {\n    // Check if line matches section patterns\n    for (const [section, pattern] of Object.entries(this.sectionPatterns)) {\n      if (pattern.test(line)) {\n        // Additional validation: section headers are often short\n        if (line.length < 50 && (!nextLine || nextLine.length > 10)) {\n          return section;\n        }\n      }\n    }\n\n    // Check for uppercase headers (common in resumes)\n    if (line === line.toUpperCase() && line.length < 30) {\n      const lowercaseLine = line.toLowerCase();\n      for (const [section, pattern] of Object.entries(this.sectionPatterns)) {\n        if (pattern.test(lowercaseLine)) {\n          return section;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process content for specific sections\n   * Implements section-specific parsing logic\n   */\n  private processSection(section: string, content: string[], structured: StructuredResumeData): void {\n    switch (section) {\n      case 'experience':\n        structured.experience = this.parseExperience(content);\n        break;\n      case 'education':\n        structured.education = this.parseEducation(content);\n        break;\n      case 'skills':\n        structured.skills = this.parseSkills(content);\n        break;\n      case 'projects':\n        structured.projects = this.parseProjects(content);\n        break;\n      case 'certifications':\n        structured.certifications = content.filter(line => line.trim().length > 0);\n        break;\n      case 'summary':\n        structured.summary = content.join(' ').trim();\n        break;\n      default:\n        console.log(`Unknown section: ${section}`);\n    }\n  }\n\n  /**\n   * Parse experience section\n   * Implements job entry extraction with dates and descriptions\n   */\n  private parseExperience(content: string[]): ExperienceEntry[] {\n    const experiences: ExperienceEntry[] = [];\n    let currentEntry: Partial<ExperienceEntry> | null = null;\n\n    for (const line of content) {\n      if (this.looksLikeJobTitle(line)) {\n        // Save previous entry\n        if (currentEntry && currentEntry.company && currentEntry.position) {\n          experiences.push(currentEntry as ExperienceEntry);\n        }\n\n        // Start new entry\n        const parts = line.split(' at ');\n        if (parts.length >= 2) {\n          currentEntry = {\n            position: parts[0]?.trim() || '',\n            company: parts[1]?.trim() || '',\n            description: [],\n          };\n        } else {\n          currentEntry = {\n            position: line.trim(),\n            company: '',\n            description: [],\n          };\n        }\n      } else if (currentEntry) {\n        // Check if it's a date range\n        if (line.match(/\\d{4}|\\w+\\s+\\d{4}/)) {\n          currentEntry.duration = line;\n        } else if (!currentEntry.company && line.length > 0) {\n          currentEntry.company = line;\n        } else if (line.length > 10) {\n          if (!currentEntry.description) {\n            currentEntry.description = [];\n          }\n          currentEntry.description.push(line);\n        }\n      }\n    }\n\n    // Add final entry\n    if (currentEntry && currentEntry.company && currentEntry.position) {\n      experiences.push(currentEntry as ExperienceEntry);\n    }\n\n    return experiences;\n  }\n\n  /**\n   * Parse skills section\n   * Implements skill extraction and categorization\n   */\n  private parseSkills(content: string[]): string[] {\n    const skills: string[] = [];\n\n    content.forEach(line => {\n      // Split by common delimiters\n      const lineSkills = line\n        .split(/[,•·\\-\\n]/)\n        .map(skill => skill.trim())\n        .filter(skill => skill.length > 1 && this.looksLikeSkill(skill));\n\n      skills.push(...lineSkills);\n    });\n\n    // Remove duplicates and return\n    return [...new Set(skills)];\n  }\n\n  /**\n   * Parse education section\n   * Implements degree and institution extraction\n   */\n  private parseEducation(content: string[]): EducationEntry[] {\n    const education: EducationEntry[] = [];\n    let currentEntry: Partial<EducationEntry> | null = null;\n\n    for (const line of content) {\n      if (this.looksLikeInstitution(line)) {\n        // Save previous entry\n        if (currentEntry && currentEntry.institution) {\n          education.push(currentEntry as EducationEntry);\n        }\n\n        // Start new entry\n        currentEntry = {\n          institution: line.trim(),\n          degree: '',\n        };\n      } else if (currentEntry) {\n        if (line.includes('Bachelor') || line.includes('Master') || line.includes('PhD')) {\n          currentEntry.degree = line.trim();\n        } else if (line.match(/\\d{4}/)) {\n          currentEntry.graduationDate = line.trim();\n        }\n      }\n    }\n\n    // Add final entry\n    if (currentEntry && currentEntry.institution) {\n      education.push(currentEntry as EducationEntry);\n    }\n\n    return education;\n  }\n\n  /**\n   * Parse projects section\n   * Implements project extraction with descriptions\n   */\n  private parseProjects(content: string[]): ProjectEntry[] {\n    const projects: ProjectEntry[] = [];\n    let currentProject: Partial<ProjectEntry> | null = null;\n\n    for (const line of content) {\n      if (line.length > 0 && !line.startsWith('-') && !line.startsWith('•')) {\n        // Save previous project\n        if (currentProject && currentProject.name) {\n          projects.push(currentProject as ProjectEntry);\n        }\n\n        // Start new project\n        currentProject = {\n          name: line.trim(),\n          description: '',\n        };\n      } else if (currentProject && line.length > 0) {\n        if (!currentProject.description) {\n          currentProject.description = '';\n        }\n        currentProject.description += ' ' + line.trim();\n      }\n    }\n\n    // Add final project\n    if (currentProject && currentProject.name) {\n      projects.push(currentProject as ProjectEntry);\n    }\n\n    return projects;\n  }\n\n  /**\n   * Extract personal information from text lines\n   * Implements contact detail extraction with pattern matching\n   */\n  private extractPersonalInfo(line: string, personalInfo: PersonalInfo): void {\n    // Email detection\n    const emailMatch = line.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\n    if (emailMatch) {\n      personalInfo.email = emailMatch[0];\n    }\n\n    // Phone detection\n    const phoneMatch = line.match(/(\\+?\\d{1,3}[-.\\s]?)?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}/);\n    if (phoneMatch) {\n      personalInfo.phone = phoneMatch[0];\n    }\n\n    // LinkedIn detection\n    if (line.includes('linkedin.com')) {\n      personalInfo.linkedin = line.trim();\n    }\n\n    // GitHub detection\n    if (line.includes('github.com')) {\n      personalInfo.github = line.trim();\n    }\n\n    // Name detection (often the first non-header line)\n    if (!personalInfo.name && line.length > 5 && line.length < 50 && !line.includes('@')) {\n      // Simple heuristic for name detection\n      const words = line.split(' ');\n      if (words.length >= 2 && words.length <= 4) {\n        personalInfo.name = line.trim();\n      }\n    }\n  }\n\n  /**\n   * Check if text looks like a job title\n   */\n  private looksLikeJobTitle(text: string): boolean {\n    const jobTitlePatterns = [\n      /engineer/i,\n      /developer/i,\n      /manager/i,\n      /analyst/i,\n      /designer/i,\n      /consultant/i,\n      /specialist/i,\n      /coordinator/i,\n      /director/i,\n      /lead/i,\n    ];\n\n    return jobTitlePatterns.some(pattern => pattern.test(text));\n  }\n\n  /**\n   * Check if text looks like a skill\n   */\n  private looksLikeSkill(text: string): boolean {\n    return text.length > 1 && text.length < 30 && !text.includes(' ') && !text.match(/\\d{4}/);\n  }\n\n  /**\n   * Check if text looks like an institution name\n   */\n  private looksLikeInstitution(text: string): boolean {\n    const institutionKeywords = ['university', 'college', 'institute', 'school', 'academy'];\n    return institutionKeywords.some(keyword => text.toLowerCase().includes(keyword));\n  }\n\n  /**\n   * Categorize skill into predefined categories\n   */\n  private categorizeSkill(skill: string): string {\n    const normalizedSkill = skill.toLowerCase();\n    \n    for (const [category, skills] of Object.entries(this.skillCategories)) {\n      if (skills.includes(normalizedSkill)) {\n        return category;\n      }\n    }\n    \n    return 'other';\n  }\n\n  /**\n   * Enhance structured data with derived insights\n   * Implements data enrichment and validation\n   */\n  private enhanceStructuredData(structured: StructuredResumeData): void {\n    // Calculate total experience\n    if (structured.experience.length > 0) {\n      const totalYears = this.calculateTotalExperience(structured.experience);\n      console.log(`Total experience: ${totalYears} years`);\n    }\n\n    // Categorize skills\n    structured.skills = structured.skills.map(skill => {\n      const category = this.categorizeSkill(skill);\n      return skill; // Could be enhanced to include category metadata\n    });\n\n    // Validate and clean data\n    structured.skills = [...new Set(structured.skills)]; // Remove duplicates\n  }\n\n  /**\n   * Calculate total years of experience\n   */\n  private calculateTotalExperience(experiences: ExperienceEntry[]): number {\n    // Simple calculation - would need more sophisticated date parsing in production\n    return experiences.length * 2; // Placeholder: assume 2 years per position\n  }\n} ","/**\n * CandidAI Chrome Extension - Constants\n * Centralized configuration and constants for enterprise-grade development\n * Implements type-safe constants with proper categorization\n */\n\n/**\n * CandidAI Meeting Assistant - Core Constants\n * Enterprise-grade configuration management for multi-context AI assistance\n * Supports interviews, sales, meetings, reviews, and various interaction tones\n */\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface LLMPreferences {\n  preferredProvider: 'openai' | 'anthropic' | 'gemini';\n  fallbackOrder: readonly ('openai' | 'anthropic' | 'gemini')[];\n  modelPreferences: {\n    openai: string;\n    anthropic: string;\n    gemini: string;\n  };\n}\n\nexport interface UIPreferences {\n  theme: 'light' | 'dark' | 'auto';\n  fontSize: 'small' | 'medium' | 'large';\n  autoScroll: boolean;\n  language: string;\n}\n\nexport interface TranscriptionPreferences {\n  language: string;\n  useExternalStt: boolean;\n  silenceThreshold: number;\n  silenceDuration: number;\n}\n\nexport interface ResponsePreferences {\n  tone: 'professional' | 'casual' | 'formal';\n  length: 'short' | 'medium' | 'long';\n  detailLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface SessionManagement {\n  autoCleanupDelayMs: number;\n  maxActiveSessions: number;\n}\n\nexport interface SpeechToTextConfig {\n  enableQuestionDetection: boolean;\n  questionDetectionMethod: 'punctuation' | 'ml_model' | 'keyword_based';\n  questionKeywords: string[];\n  enableSpeakerDiarization: boolean;\n  defaultSpeaker: 'interviewer' | 'candidate' | 'unknown';\n  confidenceThreshold: number;\n}\n\nexport interface AppConfig {\n  llmPreferences: LLMPreferences;\n  uiPreferences: UIPreferences;\n  transcriptionPreferences: TranscriptionPreferences;\n  responsePreferences: ResponsePreferences;\n  sessionManagement: SessionManagement;\n  speechToTextConfig: SpeechToTextConfig;\n}\n\nexport interface SessionMetadata {\n  platform?: string;\n  tabId?: number;\n  initiatedTs?: number;\n  uiConnected?: boolean;\n  company?: string;\n  position?: string;\n  initiatedBy?: string;\n  [key: string]: any; // Allow additional metadata fields\n}\n\nexport interface InterviewSession {\n  id: string;\n  platform: string;\n  startTime: number;\n  endTime?: number;\n  state: 'ACTIVE' | 'ENDING' | 'ENDED' | 'ERROR_ANALYSIS_FAILED' | 'PORT_DISCONNECTED';\n  transcriptions: TranscriptionEntry[];\n  suggestions: SuggestionEntry[];\n  metadata: SessionMetadata;\n  context?: any; // Context from ContextManager\n  report?: any; // Final report from PerformanceAnalyzer\n  error?: string;\n}\n\nexport interface TranscriptionEntry {\n  text: string;\n  timestamp: number;\n  confidence: number;\n  isQuestion: boolean;\n  speaker?: string;\n  suggestions?: SuggestionEntry[];\n}\n\nexport interface SuggestionEntry {\n  id?: string;\n  text: string;\n  type?: string;\n  confidence?: number;\n  timestamp: number;\n  wasUsed?: boolean;\n}\n\nexport interface TranscriptionData {\n  text: string;\n  confidence?: number;\n  isQuestion?: boolean;\n  speaker?: string;\n  timestamp?: number;\n}\n\nexport interface MessagePayload {\n  command: string;\n  payload?: any;\n}\n\nexport interface ServiceWorkerResponse {\n  success: boolean;\n  data?: any;\n  error?: string;\n  details?: string;\n}\n\nexport interface PortMessage {\n  command: string;\n  payload?: any;\n}\n\n// =============================================================================\n// MESSAGE COMMANDS\n// =============================================================================\n\nexport const MESSAGE_COMMANDS = {\n  // Session Management\n  INIT_INTERVIEW_SESSION: 'init_interview_session',\n  END_INTERVIEW_SESSION: 'end_interview_session',\n  UPDATE_CONTEXT: 'update_context',\n  GET_APP_STATE: 'get_app_state',\n\n  // Transcription\n  START_TRANSCRIPTION: 'start_transcription',\n  STOP_TRANSCRIPTION: 'stop_transcription',\n  PROCESS_TRANSCRIPTION: 'process_transcription',\n\n  // Audio Processing\n  START_AUDIO_CAPTURE: 'start_audio_capture',\n  STOP_AUDIO_CAPTURE: 'stop_audio_capture',\n  AUDIO_DATA: 'audio_data',\n\n  // Platform Detection\n  PLATFORM_DETECTED: 'platform_detected',\n  GET_PLATFORM_STATUS: 'get_platform_status',\n  VIDEO_CALL_STATE_CHANGED: 'video_call_state_changed',\n\n  // Content Script\n  EXTRACT_PAGE_CONTEXT: 'extract_page_context',\n  INJECT_UI: 'inject_ui',\n\n  // Visual Analysis\n  CAPTURE_VISUAL: 'capture_visual',\n  ANALYZE_VISUAL: 'analyze_visual',\n\n  // Document Management\n  UPLOAD_DOCUMENT: 'upload_document',\n  PROCESS_DOCUMENT: 'process_document',\n  GET_DOCUMENTS: 'get_documents',\n\n  // AI Responses\n  GET_SUGGESTION: 'get_suggestion',\n  GENERATE_RESPONSE: 'generate_response',\n\n  // Testing\n  TEST_LLM_CONNECTION: 'test_llm_connection',\n  TEST_PLATFORM_DETECTION: 'test_platform_detection',\n  PING: 'ping',\n} as const;\n\nexport type MessageCommand = typeof MESSAGE_COMMANDS[keyof typeof MESSAGE_COMMANDS];\n\n// =============================================================================\n// MESSAGE TARGETS\n// =============================================================================\n\nexport const MESSAGE_TARGETS = {\n  SERVICE_WORKER: 'service_worker',\n  CONTENT_SCRIPT: 'content_script',\n  SIDE_PANEL: 'side_panel',\n  OPTIONS_PAGE: 'options_page',\n  OFFSCREEN: 'offscreen',\n} as const;\n\n// =============================================================================\n// PORT COMMANDS\n// =============================================================================\n\nexport const PORT_COMMANDS = {\n  SERVICE_WORKER_READY: 'service_worker_ready',\n  SIDE_PANEL_READY: 'side_panel_ready',\n  CONNECTION_ESTABLISHED: 'connection_established',\n  HEARTBEAT: 'heartbeat',\n} as const;\n\n// =============================================================================\n// STORAGE KEYS\n// =============================================================================\n\nexport const STORAGE_KEYS = {\n  APP_CONFIG: 'app_config',\n  USER_PREFERENCES: 'user_preferences',\n  SESSION_DATA: 'session_data',\n  ACTIVE_INTERVIEW: 'active_interview',\n  DOCUMENT_CACHE: 'document_cache',\n  PERFORMANCE_METRICS: 'performance_metrics',\n  ERROR_LOGS: 'error_logs',\n  AUDIT_TRAIL: 'audit_trail',\n} as const;\n\nexport type StorageKey = typeof STORAGE_KEYS[keyof typeof STORAGE_KEYS];\n\n// =============================================================================\n// OFFSCREEN DOCUMENT CONFIGURATION\n// =============================================================================\n\nexport const OFFSCREEN_DOCUMENT_PATH = 'offscreen/offscreen.html';\n\nexport const OFFSCREEN_REASONS = (typeof chrome !== 'undefined' && chrome.offscreen) ? [\n  chrome.offscreen.Reason.USER_MEDIA,\n  chrome.offscreen.Reason.AUDIO_PLAYBACK,\n] : ['USER_MEDIA', 'AUDIO_PLAYBACK'] as const;\n\nexport const OFFSCREEN_JUSTIFICATION = \n  'Recording audio for AI-powered meeting assistance and transcription';\n\n// =============================================================================\n// PLATFORM CONFIGURATIONS\n// =============================================================================\n\nexport const SUPPORTED_PLATFORMS = {\n  GOOGLE_MEET: {\n    name: 'Google Meet',\n    domain: 'meet.google.com',\n    selectors: {\n      videoContainer: '[data-allocation-index]',\n      participantsList: '[data-participant-id]',\n      chatButton: '[data-tooltip*=\"chat\"]',\n      micButton: '[data-tooltip*=\"microphone\"]',\n      cameraButton: '[data-tooltip*=\"camera\"]',\n    },\n  },\n  ZOOM: {\n    name: 'Zoom',\n    domain: 'zoom.us',\n    selectors: {\n      videoContainer: '.video-container',\n      participantsList: '.participants-list',\n      chatButton: '.chat-button',\n      micButton: '.audio-button',\n      cameraButton: '.video-button',\n    },\n  },\n  MICROSOFT_TEAMS: {\n    name: 'Microsoft Teams',\n    domain: 'teams.microsoft.com',\n    selectors: {\n      videoContainer: '[data-tid=\"video-container\"]',\n      participantsList: '[data-tid=\"participants-list\"]',\n      chatButton: '[data-tid=\"chat-button\"]',\n      micButton: '[data-tid=\"microphone-button\"]',\n      cameraButton: '[data-tid=\"camera-button\"]',\n    },\n  },\n  LINKEDIN: {\n    name: 'LinkedIn',\n    domain: 'linkedin.com',\n    selectors: {\n      interviewContainer: '.interview-container',\n      questionText: '.question-text',\n      answerInput: '.answer-input',\n      submitButton: '.submit-button',\n    },\n  },\n  HIREVUE: {\n    name: 'HireVue',\n    domain: 'hirevue.com',\n    selectors: {\n      questionContainer: '.question-container',\n      videoPlayer: '.video-player',\n      recordButton: '.record-button',\n      submitButton: '.submit-button',\n    },\n  },\n} as const;\n\n// =============================================================================\n// LLM PROVIDER CONFIGURATIONS\n// =============================================================================\n\nexport const LLM_PROVIDERS = {\n  OPENAI: {\n    name: 'OpenAI',\n    baseUrl: 'https://api.openai.com/v1',\n    models: ['gpt-4', 'gpt-4-turbo', 'gpt-3.5-turbo'],\n    maxTokens: 4096,\n    rateLimits: {\n      requestsPerMinute: 60,\n      tokensPerMinute: 90000,\n      dailyLimit: 1000000,\n    },\n  },\n  ANTHROPIC: {\n    name: 'Anthropic',\n    baseUrl: 'https://api.anthropic.com/v1',\n    models: ['claude-3-opus', 'claude-3-sonnet', 'claude-3-haiku'],\n    maxTokens: 4096,\n    rateLimits: {\n      requestsPerMinute: 50,\n      tokensPerMinute: 40000,\n      dailyLimit: 500000,\n    },\n  },\n  GOOGLE: {\n    name: 'Google',\n    baseUrl: 'https://generativelanguage.googleapis.com/v1',\n    models: ['gemini-pro', 'gemini-pro-vision'],\n    maxTokens: 2048,\n    rateLimits: {\n      requestsPerMinute: 60,\n      tokensPerMinute: 32000,\n      dailyLimit: 1000000,\n    },\n  },\n} as const;\n\n// =============================================================================\n// DEFAULT CONFIGURATION\n// =============================================================================\n\nexport const DEFAULT_APP_CONFIG = {\n  version: '1.0.0',\n  environment: 'production' as const,\n  features: {\n    enableTranscription: true,\n    enableAIResponses: true,\n    enableDocumentAnalysis: true,\n    enableVisualAnalysis: true,\n    enablePerformanceTracking: true,\n    enableDebugMode: false,\n  },\n  llmProviders: [\n    {\n      name: 'OpenAI',\n      apiKey: '',\n      baseUrl: LLM_PROVIDERS.OPENAI.baseUrl,\n      model: 'gpt-4',\n      maxTokens: 2048,\n      temperature: 0.7,\n      isEnabled: false,\n      priority: 1,\n      rateLimits: LLM_PROVIDERS.OPENAI.rateLimits,\n    },\n    {\n      name: 'Anthropic',\n      apiKey: '',\n      baseUrl: LLM_PROVIDERS.ANTHROPIC.baseUrl,\n      model: 'claude-3-sonnet',\n      maxTokens: 2048,\n      temperature: 0.7,\n      isEnabled: false,\n      priority: 2,\n      rateLimits: LLM_PROVIDERS.ANTHROPIC.rateLimits,\n    },\n  ],\n  ui: {\n    theme: 'auto' as const,\n    language: 'en',\n    fontSize: 'medium' as const,\n    animations: true,\n    notifications: true,\n  },\n  security: {\n    encryptStorage: true,\n    validateInputs: true,\n    rateLimiting: true,\n    auditLogging: true,\n    csrfProtection: true,\n  },\n  performance: {\n    enableMetrics: true,\n    sampleRate: 0.1,\n    maxHistorySize: 1000,\n    alertThresholds: {\n      responseTime: 5000,\n      errorRate: 0.05,\n      memoryUsage: 100 * 1024 * 1024, // 100MB\n    },\n  },\n} as const;\n\n// =============================================================================\n// AUDIO CONFIGURATION\n// =============================================================================\n\nexport const AUDIO_CONFIG = {\n  SAMPLE_RATE: 16000,\n  CHANNELS: 1,\n  BIT_DEPTH: 16,\n  BUFFER_SIZE: 4096,\n  SILENCE_THRESHOLD: 0.01,\n  SILENCE_DURATION: 1000, // ms\n  MAX_RECORDING_DURATION: 300000, // 5 minutes\n} as const;\n\n// =============================================================================\n// UI CONSTANTS\n// =============================================================================\n\nexport const UI_CONSTANTS = {\n  ANIMATION_DURATION: 300,\n  DEBOUNCE_DELAY: 500,\n  TOAST_DURATION: 5000,\n  MAX_SUGGESTIONS: 5,\n  MAX_CONVERSATION_HISTORY: 100,\n  SCROLL_THRESHOLD: 100,\n} as const;\n\n// =============================================================================\n// ERROR CODES\n// =============================================================================\n\nexport const ERROR_CODES = {\n  // General\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n  INITIALIZATION_FAILED: 'INITIALIZATION_FAILED',\n  CONFIGURATION_ERROR: 'CONFIGURATION_ERROR',\n\n  // Authentication\n  API_KEY_MISSING: 'API_KEY_MISSING',\n  API_KEY_INVALID: 'API_KEY_INVALID',\n  AUTHENTICATION_FAILED: 'AUTHENTICATION_FAILED',\n\n  // Network\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n\n  // Audio\n  AUDIO_PERMISSION_DENIED: 'AUDIO_PERMISSION_DENIED',\n  AUDIO_DEVICE_ERROR: 'AUDIO_DEVICE_ERROR',\n  TRANSCRIPTION_FAILED: 'TRANSCRIPTION_FAILED',\n\n  // Platform\n  PLATFORM_NOT_SUPPORTED: 'PLATFORM_NOT_SUPPORTED',\n  PLATFORM_DETECTION_FAILED: 'PLATFORM_DETECTION_FAILED',\n\n  // Document\n  DOCUMENT_UPLOAD_FAILED: 'DOCUMENT_UPLOAD_FAILED',\n  DOCUMENT_PROCESSING_FAILED: 'DOCUMENT_PROCESSING_FAILED',\n  DOCUMENT_TOO_LARGE: 'DOCUMENT_TOO_LARGE',\n\n  // Storage\n  STORAGE_QUOTA_EXCEEDED: 'STORAGE_QUOTA_EXCEEDED',\n  STORAGE_ACCESS_DENIED: 'STORAGE_ACCESS_DENIED',\n} as const;\n\n// =============================================================================\n// PERFORMANCE THRESHOLDS\n// =============================================================================\n\nexport const PERFORMANCE_THRESHOLDS = {\n  RESPONSE_TIME_WARNING: 2000, // ms\n  RESPONSE_TIME_ERROR: 5000, // ms\n  MEMORY_WARNING: 50 * 1024 * 1024, // 50MB\n  MEMORY_ERROR: 100 * 1024 * 1024, // 100MB\n  ERROR_RATE_WARNING: 0.02, // 2%\n  ERROR_RATE_ERROR: 0.05, // 5%\n} as const;\n\n// =============================================================================\n// SECURITY CONSTANTS\n// =============================================================================\n\nexport const SECURITY_CONSTANTS = {\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['pdf', 'docx', 'txt', 'md'],\n  MAX_API_KEY_LENGTH: 256,\n  MIN_PASSWORD_LENGTH: 8,\n  SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 hours\n  ENCRYPTION_ALGORITHM: 'AES-GCM',\n} as const;\n\n// =============================================================================\n// UI CONFIGURATION CONSTANTS\n// =============================================================================\n\nexport const CALL_TYPES = {\n  INTERVIEW: 'interview',\n  MEETING: 'meeting', \n  PRESENTATION: 'presentation',\n  TRAINING: 'training',\n} as const;\n\nexport const TONE_TYPES = {\n  PROFESSIONAL: 'professional',\n  CASUAL: 'casual',\n  FORMAL: 'formal',\n  FRIENDLY: 'friendly',\n} as const;\n\nexport const CALL_TYPE_CONFIGS = {\n  [CALL_TYPES.INTERVIEW]: {\n    name: 'Interview',\n    description: 'One-on-one interview session',\n    suggestedTone: TONE_TYPES.PROFESSIONAL,\n    features: ['transcription', 'suggestions', 'document_analysis'],\n  },\n  [CALL_TYPES.MEETING]: {\n    name: 'Meeting',\n    description: 'Team meeting or group discussion',\n    suggestedTone: TONE_TYPES.PROFESSIONAL,\n    features: ['transcription', 'action_items', 'summary'],\n  },\n  [CALL_TYPES.PRESENTATION]: {\n    name: 'Presentation',\n    description: 'Presentation or demo session',\n    suggestedTone: TONE_TYPES.FORMAL,\n    features: ['visual_analysis', 'audience_feedback'],\n  },\n  [CALL_TYPES.TRAINING]: {\n    name: 'Training',\n    description: 'Training or educational session',\n    suggestedTone: TONE_TYPES.FRIENDLY,\n    features: ['knowledge_base', 'q_and_a'],\n  },\n} as const;\n\nexport const TONE_CONFIGS = {\n  [TONE_TYPES.PROFESSIONAL]: {\n    name: 'Professional',\n    description: 'Formal business communication',\n    style: 'structured',\n    vocabulary: 'business',\n  },\n  [TONE_TYPES.CASUAL]: {\n    name: 'Casual',\n    description: 'Relaxed conversational style',\n    style: 'informal',\n    vocabulary: 'everyday',\n  },\n  [TONE_TYPES.FORMAL]: {\n    name: 'Formal',\n    description: 'Academic or official communication',\n    style: 'precise',\n    vocabulary: 'formal',\n  },\n  [TONE_TYPES.FRIENDLY]: {\n    name: 'Friendly',\n    description: 'Warm and approachable communication',\n    style: 'conversational',\n    vocabulary: 'accessible',\n  },\n} as const;\n\n// =============================================================================\n// DOCUMENT MANAGEMENT CONSTANTS\n// =============================================================================\n\nexport const MAX_DOCUMENTS = 10;\n\nexport const SUPPORTED_DOCUMENT_FORMATS = [\n  'pdf',\n  'docx',\n  'txt',\n  'md',\n  'doc',\n  'rtf',\n] as const;\n\n// =============================================================================\n// DOCUMENT PROCESSING CONSTANTS\n// =============================================================================\n\nexport const MAX_DOCUMENT_SIZE = 10 * 1024 * 1024; // 10MB\n\nexport const DOCUMENT_TYPES = {\n  RESUME: 'resume',\n  JOB_DESCRIPTION: 'job_description',\n  COVER_LETTER: 'cover_letter',\n  PORTFOLIO: 'portfolio',\n  REFERENCE: 'reference',\n  OTHER: 'other',\n} as const;\n\nexport const PRIORITY_LEVELS = {\n  LOW: 1,\n  MEDIUM: 2,\n  HIGH: 3,\n  URGENT: 4,\n  CRITICAL: 5,\n} as const;\n\nexport const DOCUMENT_PROCESSING_CONFIG = {\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_MIME_TYPES: [\n    'application/pdf',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/msword',\n    'text/plain',\n    'text/markdown',\n    'application/rtf',\n  ],\n  PROCESSING_TIMEOUT: 30000, // 30 seconds\n} as const;\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type MessageTarget = typeof MESSAGE_TARGETS[keyof typeof MESSAGE_TARGETS];\nexport type PortCommand = typeof PORT_COMMANDS[keyof typeof PORT_COMMANDS];\nexport type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];\nexport type SupportedPlatform = keyof typeof SUPPORTED_PLATFORMS;\nexport type CallTypeKey = keyof typeof CALL_TYPES;\nexport type ToneTypeKey = keyof typeof TONE_TYPES;\n","/**\n * Message Broker - Enterprise-grade messaging system\n * Implements type-safe communication between extension components\n * Provides error handling, retry logic, and performance monitoring\n */\n\nimport type { MessageRequest, MessageResponse, ChromeSender } from '../types/index';\nimport { MESSAGE_COMMANDS, MESSAGE_TARGETS } from './constants';\n\n/**\n * Message Handler Interface\n */\nexport interface MessageHandler {\n  command: string;\n  handler: (\n    request: MessageRequest,\n    sender: ChromeSender,\n    sendResponse: (response: MessageResponse) => void,\n  ) => void | Promise<void>;\n}\n\n/**\n * Message Broker Configuration\n */\nexport interface MessageBrokerConfig {\n  timeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n  enableLogging: boolean;\n}\n\n/**\n * Default configuration for message broker\n */\nconst DEFAULT_CONFIG: MessageBrokerConfig = {\n  timeout: 30000, // 30 seconds\n  retryAttempts: 3,\n  retryDelay: 1000, // 1 second\n  enableLogging: true,\n};\n\n/**\n * MessageBroker - Centralized message handling system\n * Implements enterprise patterns for reliable communication\n */\nexport class MessageBroker {\n  private readonly config: MessageBrokerConfig;\n  private readonly handlers = new Map<string, MessageHandler['handler']>();\n  private readonly pendingRequests = new Map<string, {\n    resolve: (value: MessageResponse) => void;\n    reject: (reason: Error) => void;\n    timeout: number;\n  }>();\n\n  constructor(config: Partial<MessageBrokerConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.initializeMessageListener();\n  }\n\n  /**\n   * Initialize the message listener for incoming messages\n   */\n  private initializeMessageListener(): void {\n    if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.onMessage) {\n      chrome.runtime.onMessage.addListener(\n        (\n          request: MessageRequest,\n          sender: chrome.runtime.MessageSender,\n          sendResponse: (response: MessageResponse) => void,\n        ): boolean => {\n          this.handleIncomingMessage(request, sender, sendResponse).catch((error) => {\n            console.error('Error handling incoming message:', error);\n            sendResponse({\n              success: false,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            });\n          });\n\n          return true; // Keep message channel open for async response\n        },\n      );\n    } else {\n      console.warn('Chrome extension APIs not available in this environment');\n    }\n  }\n\n  /**\n   * Handle incoming messages with proper error boundaries\n   */\n  private async handleIncomingMessage(\n    request: MessageRequest,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response: MessageResponse) => void,\n  ): Promise<void> {\n    const { command } = request;\n\n    if (this.config.enableLogging) {\n      console.log(`[MessageBroker] Received command: ${command}`, request);\n    }\n\n    const handler = this.handlers.get(command);\n    if (!handler) {\n      sendResponse({\n        success: false,\n        error: 'Unknown command',\n        details: `No handler registered for command: ${command}`,\n      });\n      return;\n    }\n\n    try {\n      await handler(request, sender as ChromeSender, sendResponse);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error(`Error in handler for command ${command}:`, error);\n      sendResponse({\n        success: false,\n        error: errorMessage,\n      });\n    }\n  }\n\n  /**\n   * Register a message handler for a specific command\n   */\n  public registerHandler(command: string, handler: MessageHandler['handler']): void {\n    if (this.handlers.has(command)) {\n      console.warn(`[MessageBroker] Overwriting existing handler for command: ${command}`);\n    }\n\n    this.handlers.set(command, handler);\n\n    if (this.config.enableLogging) {\n      console.log(`[MessageBroker] Registered handler for command: ${command}`);\n    }\n  }\n\n  /**\n   * Unregister a message handler\n   */\n  public unregisterHandler(command: string): boolean {\n    const removed = this.handlers.delete(command);\n\n    if (this.config.enableLogging && removed) {\n      console.log(`[MessageBroker] Unregistered handler for command: ${command}`);\n    }\n\n    return removed;\n  }\n\n  /**\n   * Send a message with retry logic and timeout handling\n   */\n  public async sendMessage(\n    request: MessageRequest,\n    tabId?: number,\n  ): Promise<MessageResponse> {\n    const requestId = this.generateRequestId();\n    const requestWithId = { ...request, requestId, timestamp: Date.now() };\n\n    if (this.config.enableLogging) {\n      console.log(`[MessageBroker] Sending message:`, requestWithId);\n    }\n\n    return this.sendMessageWithRetry(requestWithId, tabId, 0);\n  }\n\n  /**\n   * Send message with retry logic\n   */\n  private async sendMessageWithRetry(\n    request: MessageRequest,\n    tabId: number | undefined,\n    attempt: number,\n  ): Promise<MessageResponse> {\n    try {\n      return await this.sendSingleMessage(request, tabId);\n    } catch (error) {\n      if (attempt < this.config.retryAttempts) {\n        if (this.config.enableLogging) {\n          console.warn(\n            `[MessageBroker] Retry attempt ${attempt + 1} for message:`,\n            request.command,\n          );\n        }\n\n        await this.delay(this.config.retryDelay * (attempt + 1));\n        return this.sendMessageWithRetry(request, tabId, attempt + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Send a single message with timeout handling\n   */\n  private async sendSingleMessage(\n    request: MessageRequest,\n    tabId?: number,\n  ): Promise<MessageResponse> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Message timeout after ${this.config.timeout}ms`));\n      }, this.config.timeout);\n\n      const responseHandler = (response: MessageResponse): void => {\n        clearTimeout(timeout);\n\n        if (chrome.runtime.lastError) {\n          reject(new Error(chrome.runtime.lastError.message));\n          return;\n        }\n\n        if (!response) {\n          reject(new Error('No response received'));\n          return;\n        }\n\n        resolve(response);\n      };\n\n      try {\n        if (typeof chrome === 'undefined' || !chrome.runtime) {\n          clearTimeout(timeout);\n          reject(new Error('Chrome extension APIs not available'));\n          return;\n        }\n\n        if (tabId) {\n          chrome.tabs.sendMessage(tabId, request, responseHandler);\n        } else {\n          chrome.runtime.sendMessage(request, responseHandler);\n        }\n      } catch (error) {\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Send a message to a specific tab\n   */\n  public async sendMessageToTab(\n    tabId: number,\n    request: MessageRequest,\n  ): Promise<MessageResponse> {\n    return this.sendMessage(request, tabId);\n  }\n\n  /**\n   * Send a command with payload - convenience method\n   */\n  public async sendCommand(command: string, payload: any): Promise<MessageResponse> {\n    const request: MessageRequest = {\n      command,\n      data: payload,\n      timestamp: Date.now()\n    };\n    return this.sendMessage(request);\n  }\n\n  /**\n   * Send a message to the service worker\n   */\n  public async sendMessageToServiceWorker(\n    request: MessageRequest,\n  ): Promise<MessageResponse> {\n    return this.sendMessage({ ...request, target: MESSAGE_TARGETS.SERVICE_WORKER });\n  }\n\n  /**\n   * Send a message to content script\n   */\n  public async sendMessageToContentScript(\n    tabId: number,\n    request: MessageRequest,\n  ): Promise<MessageResponse> {\n    return this.sendMessageToTab(tabId, {\n      ...request,\n      target: MESSAGE_TARGETS.CONTENT_SCRIPT,\n    });\n  }\n\n  /**\n   * Broadcast a message to all tabs\n   */\n  public async broadcastMessage(request: MessageRequest): Promise<MessageResponse[]> {\n    try {\n      const tabs = await chrome.tabs.query({});\n      const promises = tabs\n        .filter((tab) => tab.id !== undefined)\n        .map((tab) => this.sendMessageToTab(tab.id!, request).catch(() => null));\n\n      const results = await Promise.all(promises);\n      return results.filter((result): result is MessageResponse => result !== null);\n    } catch (error) {\n      console.error('Error broadcasting message:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate a unique request ID\n   */\n  private generateRequestId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Delay utility for retry logic\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get registered handlers (for debugging)\n   */\n  public getRegisteredHandlers(): string[] {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Clear all handlers\n   */\n  public clearHandlers(): void {\n    this.handlers.clear();\n\n    if (this.config.enableLogging) {\n      console.log('[MessageBroker] All handlers cleared');\n    }\n  }\n\n  /**\n   * Get broker statistics\n   */\n  public getStats(): {\n    handlersCount: number;\n    pendingRequestsCount: number;\n  } {\n    return {\n      handlersCount: this.handlers.size,\n      pendingRequestsCount: this.pendingRequests.size,\n    };\n  }\n}\n","/**\n * SecureStorage - Enterprise-grade storage abstraction layer\n * Implements Repository pattern with encryption-at-rest capabilities\n * Leverages Web Crypto API for cryptographic operations\n */\n\nimport type { StorageProvider, EncryptedStorage } from '../types/index';\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface StorageOptions {\n  namespace?: string;\n  encrypt?: boolean;\n  ttl?: number; // Time to live in milliseconds\n}\n\nexport interface EncryptedData {\n  encrypted: boolean;\n  data: string;\n  iv?: string;\n  salt?: string;\n  algorithm?: string;\n  timestamp?: number;\n}\n\nexport interface EncryptionConfig {\n  algorithm: string;\n  keyLength: number;\n  ivLength: number;\n  saltLength: number;\n  iterations: number;\n}\n\nexport interface StoredKeyData {\n  key: JsonWebKey;\n  algorithm: string;\n  created: number;\n}\n\nexport interface BatchItem<T = any> {\n  key: string;\n  value: T;\n  options?: StorageOptions;\n}\n\n// =============================================================================\n// STORAGE NAMESPACES\n// =============================================================================\n\n/**\n * Storage namespace enumeration for logical data segregation\n */\nexport const StorageNamespaces = {\n  API_KEYS: 'candidai:apiKeys',\n  USER_PREFERENCES: 'candidai:preferences',\n  SESSION_STATE: 'candidai:session',\n  INTERVIEW_HISTORY: 'candidai:history',\n  RESUME_DATA: 'candidai:resume',\n  CONTEXT_CACHE: 'candidai:context',\n  DOCUMENTS: 'candidai:documents',\n  PERFORMANCE: 'candidai:performance',\n} as const;\n\nexport type StorageNamespace = (typeof StorageNamespaces)[keyof typeof StorageNamespaces];\n\n// =============================================================================\n// SECURE STORAGE CLASS\n// =============================================================================\n\n/**\n * SecureStorage - Implements secure data persistence with encryption\n * Provides typed storage operations with automatic serialization\n */\nexport class SecureStorage implements StorageProvider, EncryptedStorage {\n  private readonly encryptionConfig: EncryptionConfig;\n  private readonly cache: Map<string, any>;\n  private encryptionKey: CryptoKey | null;\n  private isInitialized: boolean;\n\n  constructor() {\n    // Encryption configuration\n    this.encryptionConfig = {\n      algorithm: 'AES-GCM',\n      keyLength: 256,\n      ivLength: 12,\n      saltLength: 16,\n      iterations: 100000,\n    };\n\n    // Cache for frequently accessed data\n    this.cache = new Map();\n\n    // Encryption key will be initialized on first use\n    this.encryptionKey = null;\n    this.isInitialized = false;\n  }\n\n  /**\n   * Ensure encryption is initialized before use\n   * Implements lazy initialization pattern\n   */\n  private async ensureEncryptionInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initializeEncryption();\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Initialize encryption infrastructure with key derivation\n   * Implements PBKDF2 for key stretching\n   */\n  private async initializeEncryption(): Promise<void> {\n    try {\n      // Check for existing encryption key\n      const existingKey = await this.getStoredKey();\n\n      if (!existingKey) {\n        // Generate new encryption key\n        this.encryptionKey = await this.generateEncryptionKey();\n        await this.storeEncryptionKey(this.encryptionKey);\n      } else {\n        this.encryptionKey = existingKey;\n      }\n    } catch (error) {\n      console.error('Encryption initialization failed:', error);\n      // Fallback to unencrypted storage\n      this.encryptionKey = null;\n    }\n  }\n\n  /**\n   * Generate cryptographically secure encryption key\n   * Implements CSPRNG with hardware entropy sources\n   */\n  private async generateEncryptionKey(): Promise<CryptoKey> {\n    const keyMaterial = await crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: this.encryptionConfig.keyLength,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n\n    return keyMaterial;\n  }\n\n  /**\n   * Store encryption key securely in Chrome storage\n   * Implements key persistence with metadata\n   */\n  private async storeEncryptionKey(key: CryptoKey): Promise<void> {\n    try {\n      // Export key for storage\n      const exportedKey = await crypto.subtle.exportKey('jwk', key);\n\n      const keyData: StoredKeyData = {\n        key: exportedKey,\n        algorithm: this.encryptionConfig.algorithm,\n        created: Date.now(),\n      };\n\n      await chrome.storage.local.set({\n        'candidai:encryptionKey': keyData,\n      });\n    } catch (error) {\n      console.error('Failed to store encryption key:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve stored encryption key from Chrome storage\n   * Implements key reconstruction from stored data\n   */\n  private async getStoredKey(): Promise<CryptoKey | null> {\n    try {\n      const result = await chrome.storage.local.get('candidai:encryptionKey');\n\n      if (!result['candidai:encryptionKey']) {\n        return null;\n      }\n\n      const keyData = result['candidai:encryptionKey'] as StoredKeyData;\n\n      // Import the key back into crypto API\n      const importedKey = await crypto.subtle.importKey(\n        'jwk',\n        keyData.key,\n        {\n          name: this.encryptionConfig.algorithm,\n          length: this.encryptionConfig.keyLength,\n        },\n        true,\n        ['encrypt', 'decrypt']\n      );\n\n      return importedKey;\n    } catch (error) {\n      console.error('Failed to retrieve encryption key:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Store encrypted data with automatic serialization\n   * Implements transparent encryption with type preservation\n   */\n  async set<T = any>(key: string, value: T, options: StorageOptions = {}): Promise<void> {\n    try {\n      // Ensure encryption is initialized\n      await this.ensureEncryptionInitialized();\n\n      const namespace = options.namespace || StorageNamespaces.USER_PREFERENCES;\n      const storageKey = `${namespace}:${key}`;\n\n      // Serialize complex data types\n      const serializedValue = JSON.stringify(value);\n\n      let dataToStore: EncryptedData;\n      if (this.encryptionKey && options.encrypt !== false) {\n        // Encrypt sensitive data\n        dataToStore = await this.encryptData(serializedValue);\n      } else {\n        dataToStore = {\n          encrypted: false,\n          data: serializedValue,\n          timestamp: Date.now(),\n        };\n      }\n\n      // Store with Chrome storage API\n      await chrome.storage.local.set({ [storageKey]: dataToStore });\n\n      // Update cache\n      this.cache.set(storageKey, value);\n    } catch (error) {\n      console.error('Storage operation failed:', error);\n      throw new Error(`Failed to store data for key: ${key}`);\n    }\n  }\n\n  /**\n   * Retrieve and decrypt data with automatic deserialization\n   * Implements cache-aside pattern for performance optimization\n   */\n  async get<T = any>(key: string, options: StorageOptions = {}): Promise<T | null> {\n    try {\n      // Ensure encryption is initialized\n      await this.ensureEncryptionInitialized();\n\n      const namespace = options.namespace || StorageNamespaces.USER_PREFERENCES;\n      const storageKey = `${namespace}:${key}`;\n\n      // Check cache first\n      if (this.cache.has(storageKey)) {\n        return this.cache.get(storageKey);\n      }\n\n      // Retrieve from storage\n      const result = await chrome.storage.local.get(storageKey);\n      const storedData = result[storageKey] as EncryptedData | undefined;\n\n      if (!storedData) {\n        return null;\n      }\n\n      // Check TTL if specified\n      if (options.ttl && storedData.timestamp) {\n        const age = Date.now() - storedData.timestamp;\n        if (age > options.ttl) {\n          await this.remove(key, options);\n          return null;\n        }\n      }\n\n      let deserializedValue: T;\n      if (storedData.encrypted && this.encryptionKey) {\n        // Decrypt data\n        const decryptedData = await this.decryptData(storedData);\n        deserializedValue = JSON.parse(decryptedData);\n      } else {\n        deserializedValue = JSON.parse(storedData.data);\n      }\n\n      // Update cache\n      this.cache.set(storageKey, deserializedValue);\n\n      return deserializedValue;\n    } catch (error) {\n      console.error('Storage retrieval failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(key: string, options: StorageOptions = {}): Promise<void> {\n    try {\n      const namespace = options.namespace || StorageNamespaces.USER_PREFERENCES;\n      const storageKey = `${namespace}:${key}`;\n\n      await chrome.storage.local.remove(storageKey);\n      this.cache.delete(storageKey);\n    } catch (error) {\n      console.error('Storage removal failed:', error);\n      throw new Error(`Failed to remove data for key: ${key}`);\n    }\n  }\n\n  /**\n   * Clear all storage data\n   */\n  async clear(): Promise<void> {\n    try {\n      await chrome.storage.local.clear();\n      this.cache.clear();\n    } catch (error) {\n      console.error('Storage clear failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all keys from storage\n   */\n  async getAllKeys(): Promise<string[]> {\n    try {\n      const allData = await chrome.storage.local.get();\n      return Object.keys(allData);\n    } catch (error) {\n      console.error('Failed to get all keys:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Encrypt data using AES-GCM\n   * Implements authenticated encryption with additional data\n   */\n  async encrypt(data: any): Promise<string> {\n    await this.ensureEncryptionInitialized();\n    \n    if (!this.encryptionKey) {\n      throw new Error('Encryption key not available');\n    }\n\n    const serializedData = JSON.stringify(data);\n    const encryptedData = await this.encryptData(serializedData);\n    return JSON.stringify(encryptedData);\n  }\n\n  /**\n   * Decrypt data using AES-GCM\n   * Implements authenticated decryption with integrity verification\n   */\n  async decrypt(encryptedData: string): Promise<any> {\n    await this.ensureEncryptionInitialized();\n    \n    if (!this.encryptionKey) {\n      throw new Error('Encryption key not available');\n    }\n\n    const parsedData = JSON.parse(encryptedData) as EncryptedData;\n    const decryptedData = await this.decryptData(parsedData);\n    return JSON.parse(decryptedData);\n  }\n\n  /**\n   * Internal method to encrypt data\n   */\n  private async encryptData(plaintext: string): Promise<EncryptedData> {\n    if (!this.encryptionKey) {\n      throw new Error('Encryption key not available');\n    }\n\n    // Generate random IV\n    const iv = crypto.getRandomValues(new Uint8Array(this.encryptionConfig.ivLength));\n\n    // Encrypt the data\n    const encodedData = new TextEncoder().encode(plaintext);\n    const encryptedBuffer = await crypto.subtle.encrypt(\n      {\n        name: this.encryptionConfig.algorithm,\n        iv,\n      },\n      this.encryptionKey,\n      encodedData\n    );\n\n    return {\n      encrypted: true,\n      data: this.arrayBufferToBase64(encryptedBuffer),\n      iv: this.arrayBufferToBase64(iv),\n      algorithm: this.encryptionConfig.algorithm,\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Internal method to decrypt data\n   */\n  private async decryptData(encryptedData: EncryptedData): Promise<string> {\n    if (!this.encryptionKey) {\n      throw new Error('Encryption key not available');\n    }\n\n    if (!encryptedData.iv) {\n      throw new Error('Missing IV for decryption');\n    }\n\n    // Convert base64 back to ArrayBuffer\n    const encryptedBuffer = this.base64ToArrayBuffer(encryptedData.data);\n    const iv = this.base64ToArrayBuffer(encryptedData.iv);\n\n    // Decrypt the data\n    const decryptedBuffer = await crypto.subtle.decrypt(\n      {\n        name: this.encryptionConfig.algorithm,\n        iv,\n      },\n      this.encryptionKey,\n      encryptedBuffer\n    );\n\n    return new TextDecoder().decode(decryptedBuffer);\n  }\n\n  /**\n   * Batch storage operations for efficiency\n   */\n  async batchSet<T = any>(items: BatchItem<T>[], defaultOptions: StorageOptions = {}): Promise<void> {\n    const operations = items.map(async (item) => {\n      const options = { ...defaultOptions, ...item.options };\n      await this.set(item.key, item.value, options);\n    });\n\n    await Promise.all(operations);\n  }\n\n  /**\n   * Clear specific namespace\n   */\n  async clearNamespace(namespace: StorageNamespace): Promise<void> {\n    try {\n      const allData = await chrome.storage.local.get();\n      const keysToRemove = Object.keys(allData).filter(key => key.startsWith(namespace));\n      \n      if (keysToRemove.length > 0) {\n        await chrome.storage.local.remove(keysToRemove);\n        \n        // Clear from cache as well\n        keysToRemove.forEach(key => this.cache.delete(key));\n      }\n    } catch (error) {\n      console.error('Failed to clear namespace:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get keys within a specific namespace\n   */\n  async getNamespaceKeys(namespace: StorageNamespace): Promise<string[]> {\n    try {\n      const allData = await chrome.storage.local.get();\n      return Object.keys(allData)\n        .filter(key => key.startsWith(namespace))\n        .map(key => key.replace(`${namespace}:`, ''));\n    } catch (error) {\n      console.error('Failed to get namespace keys:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Initialize storage with default configuration\n   */\n  async initialize(defaultConfig: Record<string, any>): Promise<void> {\n    try {\n      await this.ensureEncryptionInitialized();\n      \n      for (const [key, value] of Object.entries(defaultConfig)) {\n        const existing = await this.get(key);\n        if (existing === null) {\n          await this.set(key, value);\n        }\n      }\n    } catch (error) {\n      console.error('Storage initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get complete application state\n   */\n  async getState(): Promise<Record<string, any>> {\n    try {\n      const allData = await chrome.storage.local.get();\n      const state: Record<string, any> = {};\n      \n      for (const [storageKey, storedData] of Object.entries(allData)) {\n        if (storageKey.startsWith('candidai:')) {\n          const encryptedData = storedData as EncryptedData;\n          let value: any;\n          \n          if (encryptedData.encrypted && this.encryptionKey) {\n            value = JSON.parse(await this.decryptData(encryptedData));\n          } else {\n            value = JSON.parse(encryptedData.data);\n          }\n          \n          state[storageKey] = value;\n        }\n      }\n      \n      return state;\n    } catch (error) {\n      console.error('Failed to get application state:', error);\n      return {};\n    }\n  }\n\n  // =============================================================================\n  // UTILITY METHODS\n  // =============================================================================\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      const byte = bytes[i];\n      if (byte !== undefined) {\n        binary += String.fromCharCode(byte);\n      }\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Get cache statistics for monitoring\n   */\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n\n  /**\n   * Clear cache without affecting storage\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Compatibility method for getItem - alias for get method\n   */\n  async getItem<T = any>(key: string): Promise<T | null> {\n    return this.get<T>(key);\n  }\n\n  /**\n   * Compatibility method for setItem - alias for set method\n   */\n  async setItem<T = any>(key: string, value: T): Promise<void> {\n    return this.set<T>(key, value);\n  }\n} ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * CandidAI Service Worker - Central Orchestration Layer\n * Implements event-driven architecture with reactive state management\n * Leverages Chrome Extension APIs with Manifest V3 compliance\n * Enterprise-grade TypeScript implementation with strict typing\n */\n\nimport type {\n  MessageRequest,\n  MessageResponse,\n  SessionMetadata,\n  InterviewContext,\n  TranscriptionData,\n  ContextualResponse,\n  ChromeTab,\n  ChromeSender,\n  ChromePort,\n} from '@types/index';\n\nimport { MessageBroker } from '@utils/messaging';\nimport { SecureStorage } from '@utils/storage';\nimport { LLMOrchestrator } from '@services/llmOrchestrator';\nimport { ContextManager } from '@services/contextManager';\nimport { PerformanceAnalyzer } from '@services/performanceAnalyzer';\nimport {\n  MESSAGE_COMMANDS,\n  OFFSCREEN_DOCUMENT_PATH,\n  OFFSCREEN_REASONS,\n  OFFSCREEN_JUSTIFICATION,\n  DEFAULT_APP_CONFIG,\n  MESSAGE_TARGETS,\n  STORAGE_KEYS,\n  PORT_COMMANDS,\n} from '@utils/constants';\n\n/**\n * Service Worker State Management - Singleton Pattern\n * Implements enterprise-grade architecture with proper error boundaries\n */\nclass ServiceWorkerOrchestrator {\n  private readonly messageBroker: MessageBroker;\n  private readonly storage: SecureStorage;\n  private readonly llmOrchestrator: LLMOrchestrator;\n  private readonly contextManager: ContextManager;\n  private readonly performanceAnalyzer: PerformanceAnalyzer;\n\n  // State containers with reactive observers\n  private readonly activeInterviews = new Map<string, InterviewContext>();\n  private readonly offscreenDocuments = new Map<string, boolean>();\n  private readonly sidePanelStates = new Map<number, Record<string, unknown>>();\n  private readonly sidePanelPorts = new Map<number, ChromePort>();\n\n  // Configuration cache\n  private config: typeof DEFAULT_APP_CONFIG | null = null;\n\n  constructor() {\n    this.messageBroker = new MessageBroker();\n    this.storage = new SecureStorage();\n    this.llmOrchestrator = new LLMOrchestrator();\n    this.contextManager = new ContextManager();\n    this.performanceAnalyzer = new PerformanceAnalyzer();\n\n    // Initialize with error handling\n    this.initialize().catch((error) => {\n      console.error('ServiceWorkerOrchestrator initialization failed:', error);\n    });\n  }\n\n  /**\n   * Safe initialization with error boundaries\n   * Implements graceful degradation for robustness\n   */\n  private async initialize(): Promise<void> {\n    try {\n      this.initializeEventHandlers();\n      this.performanceAnalyzer.startMeasurement('sw_initialization');\n    } catch (error) {\n      console.error('Event handler initialization failed:', error);\n    }\n\n    try {\n      await this.initializeOffscreenCapabilities();\n    } catch (error) {\n      console.error('Offscreen capabilities initialization failed:', error);\n    }\n\n    try {\n      await this.loadConfiguration();\n    } catch (error) {\n      console.error('Configuration loading failed:', error);\n    }\n\n    if (this.performanceAnalyzer.isMeasuring('sw_initialization')) {\n      this.performanceAnalyzer.endMeasurement('sw_initialization');\n      const initPerf = this.performanceAnalyzer.getMeasurement('sw_initialization');\n      if (initPerf) {\n        console.log(`Service Worker Initialization Time: ${initPerf.duration}ms`);\n      }\n    }\n  }\n\n  /**\n   * Load configuration from storage with proper error handling\n   */\n  private async loadConfiguration(): Promise<void> {\n    try {\n      const storedConfig = await this.storage.get<typeof DEFAULT_APP_CONFIG>(\n        STORAGE_KEYS.APP_CONFIG,\n      );\n      this.config = storedConfig ?? DEFAULT_APP_CONFIG;\n      console.log('Configuration loaded:', this.config);\n      this.performanceAnalyzer.logEvent('configuration_loaded', {\n        hasStoredConfig: Boolean(storedConfig),\n      });\n    } catch (error) {\n      console.error('Failed to load configuration, using defaults:', error);\n      this.config = DEFAULT_APP_CONFIG;\n      this.performanceAnalyzer.logError('configuration_load_failed', error);\n    }\n  }\n\n  /**\n   * Initialize comprehensive event handler matrix\n   * Implements Command and Observer patterns\n   */\n  private initializeEventHandlers(): void {\n    // Extension lifecycle events\n    chrome.runtime.onInstalled.addListener(this.handleInstallation.bind(this));\n    chrome.runtime.onStartup.addListener(this.handleStartup.bind(this));\n\n    // Message routing with typed channels\n    chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    chrome.runtime.onConnect.addListener(this.handleConnection.bind(this));\n\n    // Action handler for toolbar icon\n    chrome.action.onClicked.addListener(this.handleActionClick.bind(this));\n\n    // Side panel lifecycle management\n    chrome.sidePanel\n      .setPanelBehavior({ openPanelOnActionClick: true })\n      .catch((error) => {\n        console.error('Side panel configuration failed:', error);\n      });\n  }\n\n  /**\n   * Handle extension installation lifecycle event\n   * Implements initialization strategy pattern\n   */\n  private async handleInstallation(\n    details: chrome.runtime.InstalledDetails,\n  ): Promise<void> {\n    console.log('CandidAI Extension installed:', details);\n\n    // Initialize default configuration matrix from constants\n    await this.storage.initialize({\n      [STORAGE_KEYS.APP_CONFIG]: DEFAULT_APP_CONFIG,\n    });\n\n    // Open options page on first install\n    if (details.reason === 'install') {\n      chrome.runtime.openOptionsPage();\n    }\n  }\n\n  /**\n   * Handle startup initialization sequence\n   * Implements lazy loading and dependency injection\n   */\n  private async handleStartup(): Promise<void> {\n    console.log('CandidAI Service Worker starting up');\n\n    try {\n      const state = await this.storage.getState();\n      if (state?.[STORAGE_KEYS.ACTIVE_INTERVIEW]) {\n        await this.resumeInterviewSession(state[STORAGE_KEYS.ACTIVE_INTERVIEW]);\n      }\n      this.performanceAnalyzer.logEvent('service_worker_startup_success');\n    } catch (error) {\n      console.error('State restoration failed during startup:', error);\n      this.performanceAnalyzer.logError('service_worker_startup_failure', error);\n    }\n  }\n\n  /**\n   * Central message routing with typed command pattern\n   * Implements CQRS (Command Query Responsibility Segregation)\n   */\n  private async handleMessage(\n    request: MessageRequest,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response: MessageResponse) => void,\n  ): Promise<boolean> {\n    const { command, payload } = request;\n    const messagePerfId = `message_${command}_${Date.now()}`;\n    this.performanceAnalyzer.startMeasurement(messagePerfId);\n\n    try {\n      let responseData: unknown;\n\n      switch (command) {\n        case MESSAGE_COMMANDS.INIT_INTERVIEW_SESSION:\n          responseData = await this.initializeInterviewSession(\n            payload?.metadata,\n            payload?.tabId,\n          );\n          sendResponse({ success: true, data: responseData });\n          break;\n\n        case MESSAGE_COMMANDS.PROCESS_TRANSCRIPTION:\n          responseData = await this.processTranscription(\n            payload?.sessionId,\n            payload?.transcriptionData,\n          );\n          sendResponse({ success: true, data: responseData });\n          break;\n\n        case MESSAGE_COMMANDS.END_INTERVIEW_SESSION:\n          responseData = await this.endInterviewSession(payload?.sessionId);\n          if ((responseData as any)?.finalState === 'ENDED') {\n            sendResponse({ success: true, data: responseData });\n          } else {\n            sendResponse({\n              success: false,\n              error: (responseData as any)?.error || 'Failed to end interview session',\n              data: responseData,\n            });\n          }\n          break;\n\n        case MESSAGE_COMMANDS.UPDATE_CONTEXT:\n          await this.contextManager.updateContext(payload);\n          sendResponse({ success: true });\n          break;\n\n        case 'TEST_LLM_CONNECTION':\n          responseData = await this.testLLMConnection(payload?.provider);\n          sendResponse(responseData as MessageResponse);\n          break;\n\n        case 'TEST_PLATFORM_DETECTION':\n          responseData = await this.testPlatformDetection(payload?.url);\n          sendResponse(responseData as MessageResponse);\n          break;\n\n        case 'ping':\n          sendResponse({ success: true, message: 'CandidAI extension is running' });\n          break;\n\n        case MESSAGE_COMMANDS.CAPTURE_VISUAL:\n          responseData = await this.captureAndAnalyzeVisual(payload);\n          sendResponse({ success: true, data: responseData });\n          break;\n\n        case MESSAGE_COMMANDS.GET_APP_STATE:\n          responseData = {\n            activeInterviewsCount: this.activeInterviews.size,\n          };\n          sendResponse({ success: true, data: responseData });\n          break;\n\n        default:\n          console.warn('Unknown command received:', command);\n          sendResponse({\n            success: false,\n            error: 'Unknown command',\n            details: `Command not recognized: ${command}`,\n          });\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      \n      console.error(`Error handling command ${command}:`, error);\n      sendResponse({ \n        success: false, \n        error: errorMessage, \n        details: errorStack,\n      });\n      this.performanceAnalyzer.logError(`command_error_${command}`, error);\n    } finally {\n      this.performanceAnalyzer.endMeasurement(messagePerfId);\n      const perfResult = this.performanceAnalyzer.getMeasurement(messagePerfId);\n      if (perfResult) {\n        console.log(`Command ${command} processed in ${perfResult.duration}ms`);\n      }\n    }\n\n    return true; // Keep message channel open for async response\n  }\n\n  /**\n   * Initialize offscreen document capabilities\n   * Implements Factory and Singleton patterns for resource optimization\n   */\n  private async initializeOffscreenCapabilities(): Promise<void> {\n    const existingContexts = await chrome.runtime.getContexts({\n      contextTypes: ['OFFSCREEN_DOCUMENT'],\n      documentUrls: [chrome.runtime.getURL(OFFSCREEN_DOCUMENT_PATH)],\n    });\n\n    if (existingContexts.length === 0) {\n      try {\n        await chrome.offscreen.createDocument({\n          url: OFFSCREEN_DOCUMENT_PATH,\n          reasons: OFFSCREEN_REASONS,\n          justification: OFFSCREEN_JUSTIFICATION,\n        });\n        console.log('Offscreen document created successfully.');\n        this.performanceAnalyzer.logEvent('offscreen_document_created');\n      } catch (error) {\n        console.error('Failed to create offscreen document:', error);\n        this.performanceAnalyzer.logError('offscreen_creation_failure', error);\n      }\n    } else {\n      console.log('Offscreen document already exists.');\n      this.performanceAnalyzer.logEvent('offscreen_document_existed');\n    }\n  }\n\n  /**\n   * Initialize comprehensive interview session\n   * Implements State Machine pattern for session lifecycle\n   */\n  private async initializeInterviewSession(\n    metadata?: Partial<SessionMetadata>,\n    tabId?: number,\n  ): Promise<InterviewContext> {\n    const sessionId = crypto.randomUUID();\n    const fullMetadata: SessionMetadata = {\n      sessionId,\n      callType: metadata?.callType ?? 'interview',\n      participantCount: metadata?.participantCount ?? 1,\n      documentCount: metadata?.documentCount ?? 0,\n      duration: 0,\n      platform: metadata?.platform ?? 'unknown',\n      createdAt: new Date(),\n      lastAccessed: new Date(),\n      encrypted: true,\n      retentionPolicy: 'standard',\n      tabId: tabId,\n      initiatedTs: Date.now(),\n      uiConnected: true,\n      ...metadata,\n    };\n\n    const session: InterviewContext = {\n      sessionId,\n      callType: fullMetadata.callType,\n      tone: 'professional',\n      documents: [],\n      participants: [],\n      conversation: [],\n      detectedEntities: {},\n      currentObjectives: [],\n      performanceMetrics: {\n        responseTime: 0,\n        accuracy: 0,\n        relevanceScore: 0,\n        documentsProcessed: 0,\n        suggestionsProvided: 0,\n        successfulInteractions: 0,\n      },\n      createdAt: new Date(),\n      lastUpdated: new Date(),\n      platform: fullMetadata.platform,\n      state: 'active',\n    };\n\n    this.activeInterviews.set(sessionId, session);\n    this.performanceAnalyzer.startInterview(fullMetadata, sessionId);\n\n    try {\n      await chrome.runtime.sendMessage({\n        target: MESSAGE_TARGETS.OFFSCREEN,\n        command: MESSAGE_COMMANDS.START_AUDIO_CAPTURE,\n        sessionId: sessionId,\n      });\n      this.performanceAnalyzer.logEvent('interview_session_initialized', { sessionId });\n    } catch (error) {\n      console.error(\n        `Failed to send START_AUDIO_CAPTURE to offscreen for session ${sessionId}:`,\n        error,\n      );\n      this.performanceAnalyzer.logError('start_audio_capture_failed', { sessionId, error });\n      session.state = 'paused'; // Set to paused instead of active if audio fails\n    }\n\n    return session;\n  }\n\n  /**\n   * Handle connection events for long-lived connections\n   * Implements port-based communication for real-time features\n   */\n  private handleConnection(port: ChromePort): void {\n    console.log('New connection established:', port.name, port.sender);\n    this.performanceAnalyzer.logEvent('port_connection_established', {\n      portName: port.name,\n      tabId: port.sender?.tab?.id,\n    });\n\n    if (port.name === MESSAGE_TARGETS.SIDE_PANEL && port.sender?.tab?.id) {\n      const tabId = port.sender.tab.id;\n      this.sidePanelPorts.set(tabId, port);\n      console.log(`[Connection] Side panel port for tab ${tabId} stored.`);\n      this.performanceAnalyzer.logEvent('sidepanel_port_stored', { tabId });\n\n      try {\n        port.postMessage({\n          command: PORT_COMMANDS.SERVICE_WORKER_READY,\n          payload: {\n            status: 'connected',\n            serviceWorkerVersion: chrome.runtime.getManifest().version,\n          },\n        });\n        this.performanceAnalyzer.logEvent('service_worker_ready_sent_to_panel', { tabId });\n      } catch (error) {\n        console.warn(\n          `[Connection] Failed to send SERVICE_WORKER_READY to side panel for tab ${tabId}:`,\n          error,\n        );\n        this.performanceAnalyzer.logError('service_worker_ready_send_failed', error, { tabId });\n      }\n    }\n\n    const messageListener = async (message: unknown): Promise<void> => {\n      console.log('Message received on port:', port.name, message);\n      this.performanceAnalyzer.logEvent('port_message_received', {\n        portName: port.name,\n        command: (message as any)?.command,\n      });\n      await this.handlePortMessage(port, message);\n    };\n\n    const disconnectListener = (): void => {\n      console.log('Port disconnected:', port.name);\n      this.performanceAnalyzer.logEvent('port_disconnected', { portName: port.name });\n\n      port.onMessage.removeListener(messageListener);\n      port.onDisconnect.removeListener(disconnectListener);\n      this.cleanupPortResources(port);\n    };\n\n    port.onMessage.addListener(messageListener);\n    port.onDisconnect.addListener(disconnectListener);\n  }\n\n  // Placeholder methods for remaining functionality\n  private async handlePortMessage(port: ChromePort, message: unknown): Promise<void> {\n    // Implementation needed\n    console.log('Handling port message:', port.name, message);\n  }\n\n  private cleanupPortResources(port: ChromePort): void {\n    // Implementation needed\n    console.log('Cleaning up port resources:', port.name);\n  }\n\n  private async handleActionClick(tab: ChromeTab): Promise<void> {\n    // Implementation needed\n    console.log('Action clicked for tab:', tab);\n  }\n\n  private async resumeInterviewSession(sessionData: unknown): Promise<void> {\n    // Implementation needed\n    console.log('Resuming interview session:', sessionData);\n  }\n\n  private async processTranscription(\n    sessionId: string, \n    transcriptionData: TranscriptionData,\n  ): Promise<ContextualResponse> {\n    // Implementation needed\n    console.log('Processing transcription:', sessionId, transcriptionData);\n    return {\n      content: 'Placeholder response',\n      tone: 'professional',\n      confidence: 0.8,\n      relevantDocuments: [],\n      supportingPoints: [],\n      followUpQuestions: [],\n      metadata: {\n        callType: 'interview',\n        responseType: 'answer',\n        priority: 'medium',\n        timing: 'immediate',\n        length: 'brief',\n      },\n    };\n  }\n\n  private async endInterviewSession(sessionId: string): Promise<{ finalState: string; error?: string }> {\n    // Implementation needed\n    console.log('Ending interview session:', sessionId);\n    return { finalState: 'ENDED' };\n  }\n\n  private async captureAndAnalyzeVisual(payload: unknown): Promise<unknown> {\n    // Implementation needed\n    console.log('Capturing and analyzing visual:', payload);\n    return {};\n  }\n\n  private async testLLMConnection(provider: string): Promise<MessageResponse> {\n    // Implementation needed\n    console.log('Testing LLM connection:', provider);\n    return { success: true };\n  }\n\n  private async testPlatformDetection(url: string): Promise<MessageResponse> {\n    // Implementation needed\n    console.log('Testing platform detection:', url);\n    return { success: true };\n  }\n}\n\n// Initialize the service worker orchestrator\nconst serviceWorkerOrchestrator = new ServiceWorkerOrchestrator();\n\n// Export for potential testing or external access\nexport { ServiceWorkerOrchestrator }; "],"names":[],"sourceRoot":""}
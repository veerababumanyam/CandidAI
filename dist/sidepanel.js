(()=>{"use strict";const e=("undefined"!=typeof chrome&&chrome.offscreen&&(chrome.offscreen.Reason.USER_MEDIA,chrome.offscreen.Reason.AUDIO_PLAYBACK),{OPENAI:{name:"OpenAI",baseUrl:"https://api.openai.com/v1",models:["gpt-4","gpt-4-turbo","gpt-3.5-turbo"],maxTokens:4096,rateLimits:{requestsPerMinute:60,tokensPerMinute:9e4,dailyLimit:1e6}},ANTHROPIC:{name:"Anthropic",baseUrl:"https://api.anthropic.com/v1",models:["claude-3-opus","claude-3-sonnet","claude-3-haiku"],maxTokens:4096,rateLimits:{requestsPerMinute:50,tokensPerMinute:4e4,dailyLimit:5e5}},GOOGLE:{name:"Google",baseUrl:"https://generativelanguage.googleapis.com/v1",models:["gemini-pro","gemini-pro-vision"],maxTokens:2048,rateLimits:{requestsPerMinute:60,tokensPerMinute:32e3,dailyLimit:1e6}}}),t=(e.OPENAI.baseUrl,e.OPENAI.rateLimits,e.ANTHROPIC.baseUrl,e.ANTHROPIC.rateLimits,{timeout:3e4,retryAttempts:3,retryDelay:1e3,enableLogging:!0});class s{config;handlers=new Map;pendingRequests=new Map;constructor(e={}){this.config={...t,...e},this.initializeMessageListener()}initializeMessageListener(){"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.onMessage?chrome.runtime.onMessage.addListener(((e,t,s)=>(this.handleIncomingMessage(e,t,s).catch((e=>{console.error("Error handling incoming message:",e),s({success:!1,error:e instanceof Error?e.message:"Unknown error"})})),!0))):console.warn("Chrome extension APIs not available in this environment")}async handleIncomingMessage(e,t,s){const{command:n}=e;this.config.enableLogging&&console.log(`[MessageBroker] Received command: ${n}`,e);const o=this.handlers.get(n);if(o)try{await o(e,t,s)}catch(e){const t=e instanceof Error?e.message:"Unknown error";console.error(`Error in handler for command ${n}:`,e),s({success:!1,error:t})}else s({success:!1,error:"Unknown command",details:`No handler registered for command: ${n}`})}registerHandler(e,t){this.handlers.has(e)&&console.warn(`[MessageBroker] Overwriting existing handler for command: ${e}`),this.handlers.set(e,t),this.config.enableLogging&&console.log(`[MessageBroker] Registered handler for command: ${e}`)}unregisterHandler(e){const t=this.handlers.delete(e);return this.config.enableLogging&&t&&console.log(`[MessageBroker] Unregistered handler for command: ${e}`),t}async sendMessage(e,t){const s={...e,requestId:this.generateRequestId(),timestamp:Date.now()};return this.config.enableLogging&&console.log("[MessageBroker] Sending message:",s),this.sendMessageWithRetry(s,t,0)}async sendMessageWithRetry(e,t,s){try{return await this.sendSingleMessage(e,t)}catch(n){if(s<this.config.retryAttempts)return this.config.enableLogging&&console.warn(`[MessageBroker] Retry attempt ${s+1} for message:`,e.command),await this.delay(this.config.retryDelay*(s+1)),this.sendMessageWithRetry(e,t,s+1);throw n}}async sendSingleMessage(e,t){return new Promise(((s,n)=>{const o=setTimeout((()=>{n(new Error(`Message timeout after ${this.config.timeout}ms`))}),this.config.timeout),i=e=>{clearTimeout(o),chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):e?s(e):n(new Error("No response received"))};try{if("undefined"==typeof chrome||!chrome.runtime)return clearTimeout(o),void n(new Error("Chrome extension APIs not available"));t?chrome.tabs.sendMessage(t,e,i):chrome.runtime.sendMessage(e,i)}catch(e){clearTimeout(o),n(e)}}))}async sendMessageToTab(e,t){return this.sendMessage(t,e)}async sendCommand(e,t){const s={command:e,data:t,timestamp:Date.now()};return this.sendMessage(s)}async sendMessageToServiceWorker(e){return this.sendMessage({...e,target:"service_worker"})}async sendMessageToContentScript(e,t){return this.sendMessageToTab(e,{...t,target:"content_script"})}async broadcastMessage(e){try{const t=(await chrome.tabs.query({})).filter((e=>void 0!==e.id)).map((t=>this.sendMessageToTab(t.id,e).catch((()=>null))));return(await Promise.all(t)).filter((e=>null!==e))}catch(e){return console.error("Error broadcasting message:",e),[]}}generateRequestId(){return`${Date.now()}-${Math.random().toString(36).substr(2,9)}`}delay(e){return new Promise((t=>setTimeout(t,e)))}getRegisteredHandlers(){return Array.from(this.handlers.keys())}clearHandlers(){this.handlers.clear(),this.config.enableLogging&&console.log("[MessageBroker] All handlers cleared")}getStats(){return{handlersCount:this.handlers.size,pendingRequestsCount:this.pendingRequests.size}}}class n{messageBroker;components;sessionState;port=null;constructor(){this.messageBroker=new s,this.components={},this.sessionState={isListening:!1,activeTab:"assistant",sessionId:null,platform:null,tokenUsage:0},this.initializeEventListeners(),this.establishServiceWorkerConnection(),this.restoreUIState()}initializeEventListeners(){document.querySelectorAll(".ca-tabs__tab").forEach((e=>{e.addEventListener("click",this.handleTabSwitch.bind(this))}));const e=document.getElementById("listening-toggle");e&&e.addEventListener("click",this.toggleListening.bind(this));const t=document.getElementById("settings-btn");t&&t.addEventListener("click",(()=>{this.openQuickSettings()}));const s=document.getElementById("capture-screen");s&&s.addEventListener("click",this.handleScreenCapture.bind(this)),document.addEventListener("keydown",this.handleKeyboardNavigation.bind(this))}establishServiceWorkerConnection(){try{this.port=chrome.runtime.connect({name:"sidepanel"}),this.port.onMessage.addListener((e=>{const{command:t,payload:s}=e;switch(t){case"TRANSCRIPTION_UPDATE":this.handleTranscriptionUpdate(s);break;case"SUGGESTION_GENERATED":this.handleSuggestionUpdate(s);break;case"CONTEXT_UPDATED":this.updateContextIndicators(s);break;case"SESSION_STATE_CHANGE":this.handleSessionStateChange(s);break;case"ERROR_NOTIFICATION":this.handleErrorNotification(s)}})),this.port.onDisconnect.addListener((()=>{console.warn("Service worker connection lost, attempting reconnection..."),setTimeout((()=>this.establishServiceWorkerConnection()),1e3)}))}catch(e){console.error("Failed to establish service worker connection:",e)}}handleTabSwitch(e){const t=e.currentTarget,s=t.dataset.tabTarget;if(!s)return;document.querySelectorAll(".ca-tabs__tab").forEach((e=>{e.classList.remove("ca-tabs__tab--active"),e.setAttribute("aria-selected","false")})),document.querySelectorAll(".ca-panel").forEach((e=>{e.classList.remove("ca-panel--active"),e.hidden=!0})),t.classList.add("ca-tabs__tab--active"),t.setAttribute("aria-selected","true");const n=document.getElementById(`panel-${s}`);n&&(n.classList.add("ca-panel--active"),n.hidden=!1),this.sessionState.activeTab=s}async toggleListening(){const e=document.getElementById("listening-toggle");if(e)try{if(this.sessionState.isListening)await this.messageBroker.sendMessage({command:"TERMINATE_SESSION",payload:{sessionId:this.sessionState.sessionId}}),this.sessionState.isListening=!1,this.sessionState.sessionId=null,e.classList.remove("ca-btn--active"),this.updateStatus("Ready","idle");else{const t=await this.messageBroker.sendMessage({command:"INIT_INTERVIEW_SESSION",payload:{platform:await this.detectPlatform(),timestamp:Date.now()}});t.success&&t.data&&(this.sessionState.isListening=!0,this.sessionState.sessionId=t.data.id,e.classList.add("ca-btn--active"),this.updateStatus("Listening...","success"))}}catch(e){console.error("Error toggling listening state:",e),this.updateStatus("Error","error")}}async detectPlatform(){try{const e=(await chrome.tabs.query({active:!0,currentWindow:!0}))[0];return e?.url?e.url.includes("meet.google.com")?"google_meet":e.url.includes("zoom.us")?"zoom":e.url.includes("teams.microsoft.com")?"teams":e.url.includes("linkedin.com")?"linkedin":e.url.includes("hirevue.com")?"hirevue":"unknown":"unknown"}catch(e){return console.error("Error detecting platform:",e),"unknown"}}handleTranscriptionUpdate(e){const t=document.getElementById("transcription-container");if(t&&e.text){const s=document.createElement("div");s.className="ca-transcript-entry",s.textContent=e.text,t.appendChild(s)}}handleSuggestionUpdate(e){const t=document.getElementById("suggestions-container");t&&e.suggestions&&(t.innerHTML="",e.suggestions.forEach((e=>{const s=document.createElement("div");s.className="ca-suggestion-card",s.textContent=e.text,t.appendChild(s)})))}async handleScreenCapture(){try{(await this.messageBroker.sendMessage({command:"CAPTURE_VISUAL",payload:{timestamp:Date.now()}})).success?this.updateStatus("Screen captured","success"):this.updateStatus("Capture failed","error")}catch(e){console.error("Screen capture error:",e),this.updateStatus("Capture error","error")}}handleKeyboardNavigation(e){e.ctrlKey&&"l"===e.key&&(e.preventDefault(),this.toggleListening())}updateStatus(e,t="idle"){console.log(`Status: ${e} (${t})`)}openQuickSettings(){try{"undefined"!=typeof chrome&&chrome.tabs&&chrome.runtime?(chrome.tabs.create({url:chrome.runtime.getURL("options/options.html"),active:!0}),console.log("Settings page opened in new tab via Chrome API")):this.openSettingsFallback()}catch(e){console.error("Error opening settings page via Chrome API:",e),this.openSettingsFallback()}}openSettingsFallback(){try{let e;if("undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.getURL)e=chrome.runtime.getURL("options/options.html");else{const t=window.location.href;e=t.includes("127.0.0.1")||t.includes("localhost")?`${t.split("/dist/")[0]}/dist/options/options.html`:"../options/options.html"}const t=window.open(e,"_blank","width=1200,height=800,scrollbars=yes,resizable=yes");t?(t.focus(),console.log("Settings page opened in new window:",e)):(console.log("Popup blocked, redirecting in same window"),window.location.href=e)}catch(e){console.error("Fallback settings opening failed:",e),alert("Please open the options page manually: dist/options/options.html")}}handleSessionStateChange(e){Object.assign(this.sessionState,e)}handleErrorNotification(e){console.error("Error notification:",e),this.updateStatus("Error occurred","error")}updateContextIndicators(e){console.log("Context updated:",e)}async restoreUIState(){try{const e=await chrome.storage.local.get("uiState");e.uiState&&Object.assign(this.sessionState,e.uiState)}catch(e){console.error("Error restoring UI state:",e)}}initialize(){console.log("CandidAI Side Panel initialized"),this.updateStatus("Ready","idle")}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{(new n).initialize()})):(new n).initialize()})();